/*
 * generated by Xtext 2.10.0
 */
grammar InternalStateConstraintTransition;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.stateconstrainttransition.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.stateconstrainttransition.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.stateconstrainttransition.services.StateConstraintTransitionGrammarAccess;

}
@parser::members {
	private StateConstraintTransitionGrammarAccess grammarAccess;

	public void setGrammarAccess(StateConstraintTransitionGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable
entryRuleVariable
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getGroup()); }
		(rule__Variable__Group__0)
		{ after(grammarAccess.getVariableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVarType
entryRuleVarType
:
{ before(grammarAccess.getVarTypeRule()); }
	 ruleVarType
{ after(grammarAccess.getVarTypeRule()); } 
	 EOF 
;

// Rule VarType
ruleVarType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarTypeAccess().getAlternatives()); }
		(rule__VarType__Alternatives)
		{ after(grammarAccess.getVarTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulemultiple
entryRulemultiple
:
{ before(grammarAccess.getMultipleRule()); }
	 rulemultiple
{ after(grammarAccess.getMultipleRule()); } 
	 EOF 
;

// Rule multiple
rulemultiple 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultipleAccess().getGroup()); }
		(rule__Multiple__Group__0)
		{ after(grammarAccess.getMultipleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDomain
entryRuleDomain
:
{ before(grammarAccess.getDomainRule()); }
	 ruleDomain
{ after(grammarAccess.getDomainRule()); } 
	 EOF 
;

// Rule Domain
ruleDomain 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDomainAccess().getAlternatives()); }
		(rule__Domain__Alternatives)
		{ after(grammarAccess.getDomainAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFloatDomain
entryRuleFloatDomain
:
{ before(grammarAccess.getFloatDomainRule()); }
	 ruleFloatDomain
{ after(grammarAccess.getFloatDomainRule()); } 
	 EOF 
;

// Rule FloatDomain
ruleFloatDomain 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFloatDomainAccess().getGroup()); }
		(rule__FloatDomain__Group__0)
		{ after(grammarAccess.getFloatDomainAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntDomain
entryRuleIntDomain
:
{ before(grammarAccess.getIntDomainRule()); }
	 ruleIntDomain
{ after(grammarAccess.getIntDomainRule()); } 
	 EOF 
;

// Rule IntDomain
ruleIntDomain 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntDomainAccess().getGroup()); }
		(rule__IntDomain__Group__0)
		{ after(grammarAccess.getIntDomainAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnumeration
entryRuleEnumeration
:
{ before(grammarAccess.getEnumerationRule()); }
	 ruleEnumeration
{ after(grammarAccess.getEnumerationRule()); } 
	 EOF 
;

// Rule Enumeration
ruleEnumeration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEnumerationAccess().getAlternatives()); }
		(rule__Enumeration__Alternatives)
		{ after(grammarAccess.getEnumerationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntEnumeration
entryRuleIntEnumeration
:
{ before(grammarAccess.getIntEnumerationRule()); }
	 ruleIntEnumeration
{ after(grammarAccess.getIntEnumerationRule()); } 
	 EOF 
;

// Rule IntEnumeration
ruleIntEnumeration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntEnumerationAccess().getGroup()); }
		(rule__IntEnumeration__Group__0)
		{ after(grammarAccess.getIntEnumerationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringEnumeration
entryRuleStringEnumeration
:
{ before(grammarAccess.getStringEnumerationRule()); }
	 ruleStringEnumeration
{ after(grammarAccess.getStringEnumerationRule()); } 
	 EOF 
;

// Rule StringEnumeration
ruleStringEnumeration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringEnumerationAccess().getGroup()); }
		(rule__StringEnumeration__Group__0)
		{ after(grammarAccess.getStringEnumerationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulemax
entryRulemax
:
{ before(grammarAccess.getMaxRule()); }
	 rulemax
{ after(grammarAccess.getMaxRule()); } 
	 EOF 
;

// Rule max
rulemax 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMaxAccess().getIntValueParserRuleCall()); }
		ruleIntValue
		{ after(grammarAccess.getMaxAccess().getIntValueParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulemin
entryRulemin
:
{ before(grammarAccess.getMinRule()); }
	 rulemin
{ after(grammarAccess.getMinRule()); } 
	 EOF 
;

// Rule min
rulemin 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMinAccess().getIntValueParserRuleCall()); }
		ruleIntValue
		{ after(grammarAccess.getMinAccess().getIntValueParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulestrings
entryRulestrings
:
{ before(grammarAccess.getStringsRule()); }
	 rulestrings
{ after(grammarAccess.getStringsRule()); } 
	 EOF 
;

// Rule strings
rulestrings 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringsAccess().getSTRINGTerminalRuleCall()); }
		RULE_STRING
		{ after(grammarAccess.getStringsAccess().getSTRINGTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleState
entryRuleState
:
{ before(grammarAccess.getStateRule()); }
	 ruleState
{ after(grammarAccess.getStateRule()); } 
	 EOF 
;

// Rule State
ruleState 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStateAccess().getAlternatives()); }
		(rule__State__Alternatives)
		{ after(grammarAccess.getStateAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTransition
entryRuleTransition
:
{ before(grammarAccess.getTransitionRule()); }
	 ruleTransition
{ after(grammarAccess.getTransitionRule()); } 
	 EOF 
;

// Rule Transition
ruleTransition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTransitionAccess().getAlternatives()); }
		(rule__Transition__Alternatives)
		{ after(grammarAccess.getTransitionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStartTransition
entryRuleStartTransition
:
{ before(grammarAccess.getStartTransitionRule()); }
	 ruleStartTransition
{ after(grammarAccess.getStartTransitionRule()); } 
	 EOF 
;

// Rule StartTransition
ruleStartTransition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStartTransitionAccess().getGroup()); }
		(rule__StartTransition__Group__0)
		{ after(grammarAccess.getStartTransitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEndTransition
entryRuleEndTransition
:
{ before(grammarAccess.getEndTransitionRule()); }
	 ruleEndTransition
{ after(grammarAccess.getEndTransitionRule()); } 
	 EOF 
;

// Rule EndTransition
ruleEndTransition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEndTransitionAccess().getGroup()); }
		(rule__EndTransition__Group__0)
		{ after(grammarAccess.getEndTransitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFullTransition
entryRuleFullTransition
:
{ before(grammarAccess.getFullTransitionRule()); }
	 ruleFullTransition
{ after(grammarAccess.getFullTransitionRule()); } 
	 EOF 
;

// Rule FullTransition
ruleFullTransition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFullTransitionAccess().getGroup()); }
		(rule__FullTransition__Group__0)
		{ after(grammarAccess.getFullTransitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEvent
entryRuleEvent
:
{ before(grammarAccess.getEventRule()); }
	 ruleEvent
{ after(grammarAccess.getEventRule()); } 
	 EOF 
;

// Rule Event
ruleEvent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEventAccess().getGroup()); }
		(rule__Event__Group__0)
		{ after(grammarAccess.getEventAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEventOccurence
entryRuleEventOccurence
:
{ before(grammarAccess.getEventOccurenceRule()); }
	 ruleEventOccurence
{ after(grammarAccess.getEventOccurenceRule()); } 
	 EOF 
;

// Rule EventOccurence
ruleEventOccurence 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEventOccurenceAccess().getEventExpressionAssignment()); }
		(rule__EventOccurence__EventExpressionAssignment)
		{ after(grammarAccess.getEventOccurenceAccess().getEventExpressionAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStateOccurence
entryRuleStateOccurence
:
{ before(grammarAccess.getStateOccurenceRule()); }
	 ruleStateOccurence
{ after(grammarAccess.getStateOccurenceRule()); } 
	 EOF 
;

// Rule StateOccurence
ruleStateOccurence 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStateOccurenceAccess().getStateExpressionAssignment()); }
		(rule__StateOccurence__StateExpressionAssignment)
		{ after(grammarAccess.getStateOccurenceAccess().getStateExpressionAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStateConstraint
entryRuleStateConstraint
:
{ before(grammarAccess.getStateConstraintRule()); }
	 ruleStateConstraint
{ after(grammarAccess.getStateConstraintRule()); } 
	 EOF 
;

// Rule StateConstraint
ruleStateConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStateConstraintAccess().getOr_stateParserRuleCall()); }
		ruleOr_state
		{ after(grammarAccess.getStateConstraintAccess().getOr_stateParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOr_state
entryRuleOr_state
:
{ before(grammarAccess.getOr_stateRule()); }
	 ruleOr_state
{ after(grammarAccess.getOr_stateRule()); } 
	 EOF 
;

// Rule Or_state
ruleOr_state 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOr_stateAccess().getGroup()); }
		(rule__Or_state__Group__0)
		{ after(grammarAccess.getOr_stateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnd_state
entryRuleAnd_state
:
{ before(grammarAccess.getAnd_stateRule()); }
	 ruleAnd_state
{ after(grammarAccess.getAnd_stateRule()); } 
	 EOF 
;

// Rule And_state
ruleAnd_state 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAnd_stateAccess().getGroup()); }
		(rule__And_state__Group__0)
		{ after(grammarAccess.getAnd_stateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStateName
entryRuleStateName
:
{ before(grammarAccess.getStateNameRule()); }
	 ruleStateName
{ after(grammarAccess.getStateNameRule()); } 
	 EOF 
;

// Rule StateName
ruleStateName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStateNameAccess().getGroup()); }
		(rule__StateName__Group__0)
		{ after(grammarAccess.getStateNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCompositeState
entryRuleCompositeState
:
{ before(grammarAccess.getCompositeStateRule()); }
	 ruleCompositeState
{ after(grammarAccess.getCompositeStateRule()); } 
	 EOF 
;

// Rule CompositeState
ruleCompositeState 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCompositeStateAccess().getGroup()); }
		(rule__CompositeState__Group__0)
		{ after(grammarAccess.getCompositeStateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConcernLevel
entryRuleConcernLevel
:
{ before(grammarAccess.getConcernLevelRule()); }
	 ruleConcernLevel
{ after(grammarAccess.getConcernLevelRule()); } 
	 EOF 
;

// Rule ConcernLevel
ruleConcernLevel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConcernLevelAccess().getGroup()); }
		(rule__ConcernLevel__Group__0)
		{ after(grammarAccess.getConcernLevelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSimpleConstraintState
entryRuleSimpleConstraintState
:
{ before(grammarAccess.getSimpleConstraintStateRule()); }
	 ruleSimpleConstraintState
{ after(grammarAccess.getSimpleConstraintStateRule()); } 
	 EOF 
;

// Rule SimpleConstraintState
ruleSimpleConstraintState 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSimpleConstraintStateAccess().getGroup()); }
		(rule__SimpleConstraintState__Group__0)
		{ after(grammarAccess.getSimpleConstraintStateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstraint
entryRuleConstraint
:
{ before(grammarAccess.getConstraintRule()); }
	 ruleConstraint
{ after(grammarAccess.getConstraintRule()); } 
	 EOF 
;

// Rule Constraint
ruleConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstraintAccess().getLog_exprParserRuleCall()); }
		ruleLog_expr
		{ after(grammarAccess.getConstraintAccess().getLog_exprParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLog_expr
entryRuleLog_expr
:
{ before(grammarAccess.getLog_exprRule()); }
	 ruleLog_expr
{ after(grammarAccess.getLog_exprRule()); } 
	 EOF 
;

// Rule Log_expr
ruleLog_expr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLog_exprAccess().getGroup()); }
		(rule__Log_expr__Group__0)
		{ after(grammarAccess.getLog_exprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOr_expr
entryRuleOr_expr
:
{ before(grammarAccess.getOr_exprRule()); }
	 ruleOr_expr
{ after(grammarAccess.getOr_exprRule()); } 
	 EOF 
;

// Rule Or_expr
ruleOr_expr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOr_exprAccess().getGroup()); }
		(rule__Or_expr__Group__0)
		{ after(grammarAccess.getOr_exprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnd_expr
entryRuleAnd_expr
:
{ before(grammarAccess.getAnd_exprRule()); }
	 ruleAnd_expr
{ after(grammarAccess.getAnd_exprRule()); } 
	 EOF 
;

// Rule And_expr
ruleAnd_expr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAnd_exprAccess().getGroup()); }
		(rule__And_expr__Group__0)
		{ after(grammarAccess.getAnd_exprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCompare_expr
entryRuleCompare_expr
:
{ before(grammarAccess.getCompare_exprRule()); }
	 ruleCompare_expr
{ after(grammarAccess.getCompare_exprRule()); } 
	 EOF 
;

// Rule Compare_expr
ruleCompare_expr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCompare_exprAccess().getGroup()); }
		(rule__Compare_expr__Group__0)
		{ after(grammarAccess.getCompare_exprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulemath_expr
entryRulemath_expr
:
{ before(grammarAccess.getMath_exprRule()); }
	 rulemath_expr
{ after(grammarAccess.getMath_exprRule()); } 
	 EOF 
;

// Rule math_expr
rulemath_expr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMath_exprAccess().getGroup()); }
		(rule__Math_expr__Group__0)
		{ after(grammarAccess.getMath_exprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleterm
entryRuleterm
:
{ before(grammarAccess.getTermRule()); }
	 ruleterm
{ after(grammarAccess.getTermRule()); } 
	 EOF 
;

// Rule term
ruleterm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTermAccess().getAlternatives()); }
		(rule__Term__Alternatives)
		{ after(grammarAccess.getTermAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAtomic
entryRuleAtomic
:
{ before(grammarAccess.getAtomicRule()); }
	 ruleAtomic
{ after(grammarAccess.getAtomicRule()); } 
	 EOF 
;

// Rule Atomic
ruleAtomic 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAtomicAccess().getAlternatives()); }
		(rule__Atomic__Alternatives)
		{ after(grammarAccess.getAtomicAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableName
entryRuleVariableName
:
{ before(grammarAccess.getVariableNameRule()); }
	 ruleVariableName
{ after(grammarAccess.getVariableNameRule()); } 
	 EOF 
;

// Rule VariableName
ruleVariableName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableNameAccess().getGroup()); }
		(rule__VariableName__Group__0)
		{ after(grammarAccess.getVariableNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGlobalConstraint
entryRuleGlobalConstraint
:
{ before(grammarAccess.getGlobalConstraintRule()); }
	 ruleGlobalConstraint
{ after(grammarAccess.getGlobalConstraintRule()); } 
	 EOF 
;

// Rule GlobalConstraint
ruleGlobalConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGlobalConstraintAccess().getAlternatives()); }
		(rule__GlobalConstraint__Alternatives)
		{ after(grammarAccess.getGlobalConstraintAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulegroup_most_least
entryRulegroup_most_least
:
{ before(grammarAccess.getGroup_most_leastRule()); }
	 rulegroup_most_least
{ after(grammarAccess.getGroup_most_leastRule()); } 
	 EOF 
;

// Rule group_most_least
rulegroup_most_least 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGroup_most_leastAccess().getGroup()); }
		(rule__Group_most_least__Group__0)
		{ after(grammarAccess.getGroup_most_leastAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulegroup_valuation
entryRulegroup_valuation
:
{ before(grammarAccess.getGroup_valuationRule()); }
	 rulegroup_valuation
{ after(grammarAccess.getGroup_valuationRule()); } 
	 EOF 
;

// Rule group_valuation
rulegroup_valuation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGroup_valuationAccess().getGroup()); }
		(rule__Group_valuation__Group__0)
		{ after(grammarAccess.getGroup_valuationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMax_Min
entryRuleMax_Min
:
{ before(grammarAccess.getMax_MinRule()); }
	 ruleMax_Min
{ after(grammarAccess.getMax_MinRule()); } 
	 EOF 
;

// Rule Max_Min
ruleMax_Min 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMax_MinAccess().getGroup()); }
		(rule__Max_Min__Group__0)
		{ after(grammarAccess.getMax_MinAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulevarEnumeration
entryRulevarEnumeration
:
{ before(grammarAccess.getVarEnumerationRule()); }
	 rulevarEnumeration
{ after(grammarAccess.getVarEnumerationRule()); } 
	 EOF 
;

// Rule varEnumeration
rulevarEnumeration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarEnumerationAccess().getGroup()); }
		(rule__VarEnumeration__Group__0)
		{ after(grammarAccess.getVarEnumerationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFQN
entryRuleFQN
:
{ before(grammarAccess.getFQNRule()); }
	 ruleFQN
{ after(grammarAccess.getFQNRule()); } 
	 EOF 
;

// Rule FQN
ruleFQN 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFQNAccess().getGroup()); }
		(rule__FQN__Group__0)
		{ after(grammarAccess.getFQNAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntValue
entryRuleIntValue
:
{ before(grammarAccess.getIntValueRule()); }
	 ruleIntValue
{ after(grammarAccess.getIntValueRule()); } 
	 EOF 
;

// Rule IntValue
ruleIntValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntValueAccess().getAlternatives()); }
		(rule__IntValue__Alternatives)
		{ after(grammarAccess.getIntValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstant
entryRuleConstant
:
{ before(grammarAccess.getConstantRule()); }
	 ruleConstant
{ after(grammarAccess.getConstantRule()); } 
	 EOF 
;

// Rule Constant
ruleConstant 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstantAccess().getAlternatives()); }
		(rule__Constant__Alternatives)
		{ after(grammarAccess.getConstantAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarTypeAccess().getStringKeyword_0()); }
		'String'
		{ after(grammarAccess.getVarTypeAccess().getStringKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getVarTypeAccess().getIntegerKeyword_1()); }
		'Integer'
		{ after(grammarAccess.getVarTypeAccess().getIntegerKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getVarTypeAccess().getFloatKeyword_2()); }
		'Float'
		{ after(grammarAccess.getVarTypeAccess().getFloatKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getVarTypeAccess().getBooleanKeyword_3()); }
		'Boolean'
		{ after(grammarAccess.getVarTypeAccess().getBooleanKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Domain__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDomainAccess().getFloatDomainParserRuleCall_0()); }
		ruleFloatDomain
		{ after(grammarAccess.getDomainAccess().getFloatDomainParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getDomainAccess().getIntDomainParserRuleCall_1()); }
		ruleIntDomain
		{ after(grammarAccess.getDomainAccess().getIntDomainParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumerationAccess().getIntEnumerationParserRuleCall_0()); }
		ruleIntEnumeration
		{ after(grammarAccess.getEnumerationAccess().getIntEnumerationParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEnumerationAccess().getStringEnumerationParserRuleCall_1()); }
		ruleStringEnumeration
		{ after(grammarAccess.getEnumerationAccess().getStringEnumerationParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateAccess().getSimpleConstraintStateParserRuleCall_0()); }
		ruleSimpleConstraintState
		{ after(grammarAccess.getStateAccess().getSimpleConstraintStateParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStateAccess().getCompositeStateParserRuleCall_1()); }
		ruleCompositeState
		{ after(grammarAccess.getStateAccess().getCompositeStateParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransitionAccess().getStartTransitionParserRuleCall_0()); }
		ruleStartTransition
		{ after(grammarAccess.getTransitionAccess().getStartTransitionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTransitionAccess().getEndTransitionParserRuleCall_1()); }
		ruleEndTransition
		{ after(grammarAccess.getTransitionAccess().getEndTransitionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getTransitionAccess().getFullTransitionParserRuleCall_2()); }
		ruleFullTransition
		{ after(grammarAccess.getTransitionAccess().getFullTransitionParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__OperatorAlternatives_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventAccess().getOperatorReverseSolidusSolidusKeyword_2_0_0()); }
		'\\/'
		{ after(grammarAccess.getEventAccess().getOperatorReverseSolidusSolidusKeyword_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getEventAccess().getOperatorSolidusReverseSolidusKeyword_2_0_1()); }
		'/\\'
		{ after(grammarAccess.getEventAccess().getOperatorSolidusReverseSolidusKeyword_2_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Log_expr__OperatorAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLog_exprAccess().getOperatorHyphenMinusGreaterThanSignKeyword_1_1_0_0()); }
		'->'
		{ after(grammarAccess.getLog_exprAccess().getOperatorHyphenMinusGreaterThanSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getLog_exprAccess().getOperatorLessThanSignHyphenMinusGreaterThanSignKeyword_1_1_0_1()); }
		'<->'
		{ after(grammarAccess.getLog_exprAccess().getOperatorLessThanSignHyphenMinusGreaterThanSignKeyword_1_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getLog_exprAccess().getOperatorLessThanSignHyphenMinusKeyword_1_1_0_2()); }
		'<-'
		{ after(grammarAccess.getLog_exprAccess().getOperatorLessThanSignHyphenMinusKeyword_1_1_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__And_expr__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAnd_exprAccess().getCompare_exprParserRuleCall_0_0()); }
		ruleCompare_expr
		{ after(grammarAccess.getAnd_exprAccess().getCompare_exprParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAnd_exprAccess().getGlobalConstraintParserRuleCall_0_1()); }
		ruleGlobalConstraint
		{ after(grammarAccess.getAnd_exprAccess().getGlobalConstraintParserRuleCall_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare_expr__OperatorAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompare_exprAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_0()); }
		'>='
		{ after(grammarAccess.getCompare_exprAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getCompare_exprAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_1()); }
		'<='
		{ after(grammarAccess.getCompare_exprAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getCompare_exprAccess().getOperatorEqualsSignKeyword_1_1_0_2()); }
		'='
		{ after(grammarAccess.getCompare_exprAccess().getOperatorEqualsSignKeyword_1_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getCompare_exprAccess().getOperatorExclamationMarkEqualsSignKeyword_1_1_0_3()); }
		'!='
		{ after(grammarAccess.getCompare_exprAccess().getOperatorExclamationMarkEqualsSignKeyword_1_1_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getCompare_exprAccess().getOperatorGreaterThanSignKeyword_1_1_0_4()); }
		'>'
		{ after(grammarAccess.getCompare_exprAccess().getOperatorGreaterThanSignKeyword_1_1_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getCompare_exprAccess().getOperatorLessThanSignKeyword_1_1_0_5()); }
		'<'
		{ after(grammarAccess.getCompare_exprAccess().getOperatorLessThanSignKeyword_1_1_0_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Math_expr__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMath_exprAccess().getPlusSignKeyword_1_1_0()); }
		'+'
		{ after(grammarAccess.getMath_exprAccess().getPlusSignKeyword_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getMath_exprAccess().getAsteriskKeyword_1_1_1()); }
		'*'
		{ after(grammarAccess.getMath_exprAccess().getAsteriskKeyword_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTermAccess().getGroup_0()); }
		(rule__Term__Group_0__0)
		{ after(grammarAccess.getTermAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getTermAccess().getGroup_1()); }
		(rule__Term__Group_1__0)
		{ after(grammarAccess.getTermAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getTermAccess().getAtomicParserRuleCall_2()); }
		ruleAtomic
		{ after(grammarAccess.getTermAccess().getAtomicParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getGroup_0()); }
		(rule__Atomic__Group_0__0)
		{ after(grammarAccess.getAtomicAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicAccess().getGroup_1()); }
		(rule__Atomic__Group_1__0)
		{ after(grammarAccess.getAtomicAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicAccess().getGroup_2()); }
		(rule__Atomic__Group_2__0)
		{ after(grammarAccess.getAtomicAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalConstraint__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGlobalConstraintAccess().getGroup_valuationParserRuleCall_0()); }
		rulegroup_valuation
		{ after(grammarAccess.getGlobalConstraintAccess().getGroup_valuationParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getGlobalConstraintAccess().getGroup_most_leastParserRuleCall_1()); }
		rulegroup_most_least
		{ after(grammarAccess.getGlobalConstraintAccess().getGroup_most_leastParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getGlobalConstraintAccess().getMax_MinParserRuleCall_2()); }
		ruleMax_Min
		{ after(grammarAccess.getGlobalConstraintAccess().getMax_MinParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_most_least__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGroup_most_leastAccess().getAt_leastKeyword_0_0()); }
		'at_least('
		{ after(grammarAccess.getGroup_most_leastAccess().getAt_leastKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getGroup_most_leastAccess().getAt_mostKeyword_0_1()); }
		'at_most('
		{ after(grammarAccess.getGroup_most_leastAccess().getAt_mostKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Max_Min__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMax_MinAccess().getMaximumKeyword_0_0()); }
		'maximum('
		{ after(grammarAccess.getMax_MinAccess().getMaximumKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMax_MinAccess().getMinimumKeyword_0_1()); }
		'minimum('
		{ after(grammarAccess.getMax_MinAccess().getMinimumKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntValue__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntValueAccess().getINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getIntValueAccess().getINTTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getIntValueAccess().getDigitZeroKeyword_1()); }
		'0'
		{ after(grammarAccess.getIntValueAccess().getDigitZeroKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getIntValueAccess().getDigitOneKeyword_2()); }
		'1'
		{ after(grammarAccess.getIntValueAccess().getDigitOneKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantAccess().getINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getConstantAccess().getINTTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getConstantAccess().getGroup_1()); }
		(rule__Constant__Group_1__0)
		{ after(grammarAccess.getConstantAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getConstantAccess().getAlternatives_2()); }
		(rule__Constant__Alternatives_2)
		{ after(grammarAccess.getConstantAccess().getAlternatives_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantAccess().getDigitZeroKeyword_2_0()); }
		'0'
		{ after(grammarAccess.getConstantAccess().getDigitZeroKeyword_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getConstantAccess().getDigitOneKeyword_2_1()); }
		'1'
		{ after(grammarAccess.getConstantAccess().getDigitOneKeyword_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getStateMachineKeyword_0()); }
	'stateMachine'
	{ after(grammarAccess.getModelAccess().getStateMachineKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getNameAssignment_1()); }
	(rule__Model__NameAssignment_1)
	{ after(grammarAccess.getModelAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__2__Impl
	rule__Model__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getModelAccess().getVariableAssignment_2()); }
		(rule__Model__VariableAssignment_2)
		{ after(grammarAccess.getModelAccess().getVariableAssignment_2()); }
	)
	(
		{ before(grammarAccess.getModelAccess().getVariableAssignment_2()); }
		(rule__Model__VariableAssignment_2)*
		{ after(grammarAccess.getModelAccess().getVariableAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__3__Impl
	rule__Model__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getFlexConstraintsAssignment_3()); }
	(rule__Model__FlexConstraintsAssignment_3)*
	{ after(grammarAccess.getModelAccess().getFlexConstraintsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__4__Impl
	rule__Model__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getModelAccess().getStateAssignment_4()); }
		(rule__Model__StateAssignment_4)
		{ after(grammarAccess.getModelAccess().getStateAssignment_4()); }
	)
	(
		{ before(grammarAccess.getModelAccess().getStateAssignment_4()); }
		(rule__Model__StateAssignment_4)*
		{ after(grammarAccess.getModelAccess().getStateAssignment_4()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getModelAccess().getTransitionAssignment_5()); }
		(rule__Model__TransitionAssignment_5)
		{ after(grammarAccess.getModelAccess().getTransitionAssignment_5()); }
	)
	(
		{ before(grammarAccess.getModelAccess().getTransitionAssignment_5()); }
		(rule__Model__TransitionAssignment_5)*
		{ after(grammarAccess.getModelAccess().getTransitionAssignment_5()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__0__Impl
	rule__Variable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getVarTypeAssignment_0()); }
	(rule__Variable__VarTypeAssignment_0)
	{ after(grammarAccess.getVariableAccess().getVarTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__1__Impl
	rule__Variable__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getContextAssignment_1()); }
	(rule__Variable__ContextAssignment_1)?
	{ after(grammarAccess.getVariableAccess().getContextAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__2__Impl
	rule__Variable__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getInEnumerationAssignment_2()); }
	(rule__Variable__InEnumerationAssignment_2)?
	{ after(grammarAccess.getVariableAccess().getInEnumerationAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__3__Impl
	rule__Variable__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getNameAssignment_3()); }
	(rule__Variable__NameAssignment_3)
	{ after(grammarAccess.getVariableAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__4__Impl
	rule__Variable__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getIsMultiInstanciatedAssignment_4()); }
	(rule__Variable__IsMultiInstanciatedAssignment_4)?
	{ after(grammarAccess.getVariableAccess().getIsMultiInstanciatedAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__5__Impl
	rule__Variable__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getDomainAssignment_5()); }
	(rule__Variable__DomainAssignment_5)?
	{ after(grammarAccess.getVariableAccess().getDomainAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getValuesAssignment_6()); }
	(rule__Variable__ValuesAssignment_6)?
	{ after(grammarAccess.getVariableAccess().getValuesAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiple__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiple__Group__0__Impl
	rule__Multiple__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiple__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultipleAccess().getLeftSquareBracketKeyword_0()); }
	'['
	{ after(grammarAccess.getMultipleAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiple__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiple__Group__1__Impl
	rule__Multiple__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiple__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultipleAccess().getMinimumAssignment_1()); }
	(rule__Multiple__MinimumAssignment_1)
	{ after(grammarAccess.getMultipleAccess().getMinimumAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiple__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiple__Group__2__Impl
	rule__Multiple__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiple__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultipleAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getMultipleAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiple__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiple__Group__3__Impl
	rule__Multiple__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiple__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultipleAccess().getMaximumAssignment_3()); }
	(rule__Multiple__MaximumAssignment_3)
	{ after(grammarAccess.getMultipleAccess().getMaximumAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiple__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiple__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiple__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultipleAccess().getRightSquareBracketKeyword_4()); }
	']'
	{ after(grammarAccess.getMultipleAccess().getRightSquareBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FloatDomain__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FloatDomain__Group__0__Impl
	rule__FloatDomain__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatDomain__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatDomainAccess().getLeftSquareBracketKeyword_0()); }
	'['
	{ after(grammarAccess.getFloatDomainAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatDomain__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FloatDomain__Group__1__Impl
	rule__FloatDomain__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatDomain__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatDomainAccess().getIntValueParserRuleCall_1()); }
	ruleIntValue
	{ after(grammarAccess.getFloatDomainAccess().getIntValueParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatDomain__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FloatDomain__Group__2__Impl
	rule__FloatDomain__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatDomain__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatDomainAccess().getFullStopKeyword_2()); }
	'.'
	{ after(grammarAccess.getFloatDomainAccess().getFullStopKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatDomain__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FloatDomain__Group__3__Impl
	rule__FloatDomain__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatDomain__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatDomainAccess().getIntValueParserRuleCall_3()); }
	ruleIntValue
	{ after(grammarAccess.getFloatDomainAccess().getIntValueParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatDomain__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FloatDomain__Group__4__Impl
	rule__FloatDomain__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatDomain__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatDomainAccess().getFullStopFullStopKeyword_4()); }
	'..'
	{ after(grammarAccess.getFloatDomainAccess().getFullStopFullStopKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatDomain__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FloatDomain__Group__5__Impl
	rule__FloatDomain__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatDomain__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatDomainAccess().getIntValueParserRuleCall_5()); }
	ruleIntValue
	{ after(grammarAccess.getFloatDomainAccess().getIntValueParserRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatDomain__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FloatDomain__Group__6__Impl
	rule__FloatDomain__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatDomain__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatDomainAccess().getFullStopKeyword_6()); }
	'.'
	{ after(grammarAccess.getFloatDomainAccess().getFullStopKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatDomain__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FloatDomain__Group__7__Impl
	rule__FloatDomain__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatDomain__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatDomainAccess().getIntValueParserRuleCall_7()); }
	ruleIntValue
	{ after(grammarAccess.getFloatDomainAccess().getIntValueParserRuleCall_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatDomain__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FloatDomain__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatDomain__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFloatDomainAccess().getRightSquareBracketKeyword_8()); }
	']'
	{ after(grammarAccess.getFloatDomainAccess().getRightSquareBracketKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IntDomain__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntDomain__Group__0__Impl
	rule__IntDomain__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntDomain__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntDomainAccess().getLeftSquareBracketKeyword_0()); }
	'['
	{ after(grammarAccess.getIntDomainAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntDomain__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntDomain__Group__1__Impl
	rule__IntDomain__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IntDomain__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntDomainAccess().getIntValueParserRuleCall_1()); }
	ruleIntValue
	{ after(grammarAccess.getIntDomainAccess().getIntValueParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntDomain__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntDomain__Group__2__Impl
	rule__IntDomain__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IntDomain__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntDomainAccess().getFullStopFullStopKeyword_2()); }
	'..'
	{ after(grammarAccess.getIntDomainAccess().getFullStopFullStopKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntDomain__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntDomain__Group__3__Impl
	rule__IntDomain__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IntDomain__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntDomainAccess().getIntValueParserRuleCall_3()); }
	ruleIntValue
	{ after(grammarAccess.getIntDomainAccess().getIntValueParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntDomain__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntDomain__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntDomain__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntDomainAccess().getRightSquareBracketKeyword_4()); }
	']'
	{ after(grammarAccess.getIntDomainAccess().getRightSquareBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IntEnumeration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntEnumeration__Group__0__Impl
	rule__IntEnumeration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntEnumeration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntEnumerationAccess().getLeftCurlyBracketKeyword_0()); }
	'{'
	{ after(grammarAccess.getIntEnumerationAccess().getLeftCurlyBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntEnumeration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntEnumeration__Group__1__Impl
	rule__IntEnumeration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IntEnumeration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntEnumerationAccess().getIntValueParserRuleCall_1()); }
	ruleIntValue
	{ after(grammarAccess.getIntEnumerationAccess().getIntValueParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntEnumeration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntEnumeration__Group__2__Impl
	rule__IntEnumeration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IntEnumeration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getIntEnumerationAccess().getGroup_2()); }
		(rule__IntEnumeration__Group_2__0)
		{ after(grammarAccess.getIntEnumerationAccess().getGroup_2()); }
	)
	(
		{ before(grammarAccess.getIntEnumerationAccess().getGroup_2()); }
		(rule__IntEnumeration__Group_2__0)*
		{ after(grammarAccess.getIntEnumerationAccess().getGroup_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntEnumeration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntEnumeration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntEnumeration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntEnumerationAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getIntEnumerationAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IntEnumeration__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntEnumeration__Group_2__0__Impl
	rule__IntEnumeration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntEnumeration__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntEnumerationAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getIntEnumerationAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntEnumeration__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntEnumeration__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntEnumeration__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntEnumerationAccess().getIntValueParserRuleCall_2_1()); }
	ruleIntValue
	{ after(grammarAccess.getIntEnumerationAccess().getIntValueParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringEnumeration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringEnumeration__Group__0__Impl
	rule__StringEnumeration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringEnumeration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringEnumerationAccess().getLeftCurlyBracketKeyword_0()); }
	'{'
	{ after(grammarAccess.getStringEnumerationAccess().getLeftCurlyBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringEnumeration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringEnumeration__Group__1__Impl
	rule__StringEnumeration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StringEnumeration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringEnumerationAccess().getStringsParserRuleCall_1()); }
	rulestrings
	{ after(grammarAccess.getStringEnumerationAccess().getStringsParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringEnumeration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringEnumeration__Group__2__Impl
	rule__StringEnumeration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StringEnumeration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getStringEnumerationAccess().getGroup_2()); }
		(rule__StringEnumeration__Group_2__0)
		{ after(grammarAccess.getStringEnumerationAccess().getGroup_2()); }
	)
	(
		{ before(grammarAccess.getStringEnumerationAccess().getGroup_2()); }
		(rule__StringEnumeration__Group_2__0)*
		{ after(grammarAccess.getStringEnumerationAccess().getGroup_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringEnumeration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringEnumeration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringEnumeration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringEnumerationAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getStringEnumerationAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringEnumeration__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringEnumeration__Group_2__0__Impl
	rule__StringEnumeration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringEnumeration__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringEnumerationAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getStringEnumerationAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringEnumeration__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringEnumeration__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringEnumeration__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringEnumerationAccess().getStringsParserRuleCall_2_1()); }
	rulestrings
	{ after(grammarAccess.getStringEnumerationAccess().getStringsParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StartTransition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StartTransition__Group__0__Impl
	rule__StartTransition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StartTransition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStartTransitionAccess().getStartKeyword_0()); }
	'Start'
	{ after(grammarAccess.getStartTransitionAccess().getStartKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StartTransition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StartTransition__Group__1__Impl
	rule__StartTransition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StartTransition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStartTransitionAccess().getTransitionKeyword_1()); }
	'transition'
	{ after(grammarAccess.getStartTransitionAccess().getTransitionKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StartTransition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StartTransition__Group__2__Impl
	rule__StartTransition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StartTransition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStartTransitionAccess().getToKeyword_2()); }
	'to'
	{ after(grammarAccess.getStartTransitionAccess().getToKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StartTransition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StartTransition__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StartTransition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStartTransitionAccess().getTargetStateAssignment_3()); }
	(rule__StartTransition__TargetStateAssignment_3)
	{ after(grammarAccess.getStartTransitionAccess().getTargetStateAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EndTransition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EndTransition__Group__0__Impl
	rule__EndTransition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EndTransition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEndTransitionAccess().getEndKeyword_0()); }
	'End'
	{ after(grammarAccess.getEndTransitionAccess().getEndKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EndTransition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EndTransition__Group__1__Impl
	rule__EndTransition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EndTransition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEndTransitionAccess().getTransitionKeyword_1()); }
	'transition'
	{ after(grammarAccess.getEndTransitionAccess().getTransitionKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EndTransition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EndTransition__Group__2__Impl
	rule__EndTransition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EndTransition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEndTransitionAccess().getFromKeyword_2()); }
	'from'
	{ after(grammarAccess.getEndTransitionAccess().getFromKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EndTransition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EndTransition__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EndTransition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEndTransitionAccess().getSourceStateAssignment_3()); }
	(rule__EndTransition__SourceStateAssignment_3)
	{ after(grammarAccess.getEndTransitionAccess().getSourceStateAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FullTransition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FullTransition__Group__0__Impl
	rule__FullTransition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FullTransition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFullTransitionAccess().getGroup_0()); }
	(rule__FullTransition__Group_0__0)?
	{ after(grammarAccess.getFullTransitionAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FullTransition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FullTransition__Group__1__Impl
	rule__FullTransition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FullTransition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFullTransitionAccess().getIfKeyword_1()); }
	'if'
	{ after(grammarAccess.getFullTransitionAccess().getIfKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FullTransition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FullTransition__Group__2__Impl
	rule__FullTransition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FullTransition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFullTransitionAccess().getEventAssignment_2()); }
	(rule__FullTransition__EventAssignment_2)
	{ after(grammarAccess.getFullTransitionAccess().getEventAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FullTransition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FullTransition__Group__3__Impl
	rule__FullTransition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FullTransition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFullTransitionAccess().getTransitionKeyword_3()); }
	'transition'
	{ after(grammarAccess.getFullTransitionAccess().getTransitionKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FullTransition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FullTransition__Group__4__Impl
	rule__FullTransition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FullTransition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFullTransitionAccess().getFromKeyword_4()); }
	'from'
	{ after(grammarAccess.getFullTransitionAccess().getFromKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FullTransition__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FullTransition__Group__5__Impl
	rule__FullTransition__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__FullTransition__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFullTransitionAccess().getSourceStateAssignment_5()); }
	(rule__FullTransition__SourceStateAssignment_5)
	{ after(grammarAccess.getFullTransitionAccess().getSourceStateAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FullTransition__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FullTransition__Group__6__Impl
	rule__FullTransition__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__FullTransition__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFullTransitionAccess().getToKeyword_6()); }
	'to'
	{ after(grammarAccess.getFullTransitionAccess().getToKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FullTransition__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FullTransition__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FullTransition__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFullTransitionAccess().getTargetStateAssignment_7()); }
	(rule__FullTransition__TargetStateAssignment_7)
	{ after(grammarAccess.getFullTransitionAccess().getTargetStateAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FullTransition__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FullTransition__Group_0__0__Impl
	rule__FullTransition__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FullTransition__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFullTransitionAccess().getWhenKeyword_0_0()); }
	'When'
	{ after(grammarAccess.getFullTransitionAccess().getWhenKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FullTransition__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FullTransition__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FullTransition__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFullTransitionAccess().getStateAssignment_0_1()); }
	(rule__FullTransition__StateAssignment_0_1)
	{ after(grammarAccess.getFullTransitionAccess().getStateAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__0__Impl
	rule__Event__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getEventAction_0()); }
	()
	{ after(grammarAccess.getEventAccess().getEventAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__1__Impl
	rule__Event__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getEvOccAssignment_1()); }
	(rule__Event__EvOccAssignment_1)?
	{ after(grammarAccess.getEventAccess().getEvOccAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__2__Impl
	rule__Event__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getOperatorAssignment_2()); }
	(rule__Event__OperatorAssignment_2)?
	{ after(grammarAccess.getEventAccess().getOperatorAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getSttOccAssignment_3()); }
	(rule__Event__SttOccAssignment_3)?
	{ after(grammarAccess.getEventAccess().getSttOccAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or_state__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or_state__Group__0__Impl
	rule__Or_state__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or_state__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOr_stateAccess().getAnd_stateParserRuleCall_0()); }
	ruleAnd_state
	{ after(grammarAccess.getOr_stateAccess().getAnd_stateParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or_state__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or_state__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or_state__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOr_stateAccess().getGroup_1()); }
	(rule__Or_state__Group_1__0)*
	{ after(grammarAccess.getOr_stateAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or_state__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or_state__Group_1__0__Impl
	rule__Or_state__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or_state__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOr_stateAccess().getOr_stateLeftAction_1_0()); }
	()
	{ after(grammarAccess.getOr_stateAccess().getOr_stateLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or_state__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or_state__Group_1__1__Impl
	rule__Or_state__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Or_state__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOr_stateAccess().getReverseSolidusSolidusKeyword_1_1()); }
	'\\/'
	{ after(grammarAccess.getOr_stateAccess().getReverseSolidusSolidusKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or_state__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or_state__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or_state__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOr_stateAccess().getRipeAssignment_1_2()); }
	(rule__Or_state__RipeAssignment_1_2)
	{ after(grammarAccess.getOr_stateAccess().getRipeAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And_state__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And_state__Group__0__Impl
	rule__And_state__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And_state__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnd_stateAccess().getStateNameParserRuleCall_0()); }
	ruleStateName
	{ after(grammarAccess.getAnd_stateAccess().getStateNameParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And_state__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And_state__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And_state__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnd_stateAccess().getGroup_1()); }
	(rule__And_state__Group_1__0)*
	{ after(grammarAccess.getAnd_stateAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And_state__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And_state__Group_1__0__Impl
	rule__And_state__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And_state__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnd_stateAccess().getAnd_stateLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAnd_stateAccess().getAnd_stateLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And_state__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And_state__Group_1__1__Impl
	rule__And_state__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__And_state__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnd_stateAccess().getSolidusReverseSolidusKeyword_1_1()); }
	'/\\'
	{ after(grammarAccess.getAnd_stateAccess().getSolidusReverseSolidusKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And_state__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And_state__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And_state__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnd_stateAccess().getRipeAssignment_1_2()); }
	(rule__And_state__RipeAssignment_1_2)
	{ after(grammarAccess.getAnd_stateAccess().getRipeAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StateName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateName__Group__0__Impl
	rule__StateName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateNameAccess().getStateNameRefAction_0()); }
	()
	{ after(grammarAccess.getStateNameAccess().getStateNameRefAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateName__Group__1__Impl
	rule__StateName__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StateName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateNameAccess().getValueAssignment_1()); }
	(rule__StateName__ValueAssignment_1)
	{ after(grammarAccess.getStateNameAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateName__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateName__Group__2__Impl
	rule__StateName__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StateName__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateNameAccess().getEqualsSignKeyword_2()); }
	'='
	{ after(grammarAccess.getStateNameAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateName__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateName__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateName__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateNameAccess().getDigitOneKeyword_3()); }
	'1'
	{ after(grammarAccess.getStateNameAccess().getDigitOneKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CompositeState__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompositeState__Group__0__Impl
	rule__CompositeState__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeState__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositeStateAccess().getTypeAssignment_0()); }
	(rule__CompositeState__TypeAssignment_0)
	{ after(grammarAccess.getCompositeStateAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeState__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompositeState__Group__1__Impl
	rule__CompositeState__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeState__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositeStateAccess().getNameAssignment_1()); }
	(rule__CompositeState__NameAssignment_1)
	{ after(grammarAccess.getCompositeStateAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeState__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompositeState__Group__2__Impl
	rule__CompositeState__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeState__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getCompositeStateAccess().getConcernlevelAssignment_2()); }
		(rule__CompositeState__ConcernlevelAssignment_2)
		{ after(grammarAccess.getCompositeStateAccess().getConcernlevelAssignment_2()); }
	)
	(
		{ before(grammarAccess.getCompositeStateAccess().getConcernlevelAssignment_2()); }
		(rule__CompositeState__ConcernlevelAssignment_2)*
		{ after(grammarAccess.getCompositeStateAccess().getConcernlevelAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeState__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompositeState__Group__3__Impl
	rule__CompositeState__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeState__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositeStateAccess().getEnd_compositeStateKeyword_3()); }
	'end_compositeState'
	{ after(grammarAccess.getCompositeStateAccess().getEnd_compositeStateKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeState__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CompositeState__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeState__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompositeStateAccess().getEndCompositeStateAssignment_4()); }
	(rule__CompositeState__EndCompositeStateAssignment_4)
	{ after(grammarAccess.getCompositeStateAccess().getEndCompositeStateAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConcernLevel__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConcernLevel__Group__0__Impl
	rule__ConcernLevel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcernLevel__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConcernLevelAccess().getConcernLevelKeyword_0()); }
	'concernLevel'
	{ after(grammarAccess.getConcernLevelAccess().getConcernLevelKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcernLevel__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConcernLevel__Group__1__Impl
	rule__ConcernLevel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcernLevel__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConcernLevelAccess().getNameAssignment_1()); }
	(rule__ConcernLevel__NameAssignment_1)
	{ after(grammarAccess.getConcernLevelAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcernLevel__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConcernLevel__Group__2__Impl
	rule__ConcernLevel__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcernLevel__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getConcernLevelAccess().getStateAssignment_2()); }
		(rule__ConcernLevel__StateAssignment_2)
		{ after(grammarAccess.getConcernLevelAccess().getStateAssignment_2()); }
	)
	(
		{ before(grammarAccess.getConcernLevelAccess().getStateAssignment_2()); }
		(rule__ConcernLevel__StateAssignment_2)*
		{ after(grammarAccess.getConcernLevelAccess().getStateAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcernLevel__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConcernLevel__Group__3__Impl
	rule__ConcernLevel__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcernLevel__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConcernLevelAccess().getEnd_concernLevelKeyword_3()); }
	'end_concernLevel'
	{ after(grammarAccess.getConcernLevelAccess().getEnd_concernLevelKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcernLevel__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConcernLevel__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcernLevel__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConcernLevelAccess().getEndConcernLevelAssignment_4()); }
	(rule__ConcernLevel__EndConcernLevelAssignment_4)
	{ after(grammarAccess.getConcernLevelAccess().getEndConcernLevelAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleConstraintState__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleConstraintState__Group__0__Impl
	rule__SimpleConstraintState__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleConstraintState__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleConstraintStateAccess().getTypeAssignment_0()); }
	(rule__SimpleConstraintState__TypeAssignment_0)
	{ after(grammarAccess.getSimpleConstraintStateAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleConstraintState__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleConstraintState__Group__1__Impl
	rule__SimpleConstraintState__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleConstraintState__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleConstraintStateAccess().getNameAssignment_1()); }
	(rule__SimpleConstraintState__NameAssignment_1)
	{ after(grammarAccess.getSimpleConstraintStateAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleConstraintState__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleConstraintState__Group__2__Impl
	rule__SimpleConstraintState__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleConstraintState__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleConstraintStateAccess().getNewVariableAssignment_2()); }
	(rule__SimpleConstraintState__NewVariableAssignment_2)*
	{ after(grammarAccess.getSimpleConstraintStateAccess().getNewVariableAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleConstraintState__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleConstraintState__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleConstraintState__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getSimpleConstraintStateAccess().getConstraintAssignment_3()); }
		(rule__SimpleConstraintState__ConstraintAssignment_3)
		{ after(grammarAccess.getSimpleConstraintStateAccess().getConstraintAssignment_3()); }
	)
	(
		{ before(grammarAccess.getSimpleConstraintStateAccess().getConstraintAssignment_3()); }
		(rule__SimpleConstraintState__ConstraintAssignment_3)*
		{ after(grammarAccess.getSimpleConstraintStateAccess().getConstraintAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Log_expr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Log_expr__Group__0__Impl
	rule__Log_expr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Log_expr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLog_exprAccess().getOr_exprParserRuleCall_0()); }
	ruleOr_expr
	{ after(grammarAccess.getLog_exprAccess().getOr_exprParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Log_expr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Log_expr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Log_expr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLog_exprAccess().getGroup_1()); }
	(rule__Log_expr__Group_1__0)*
	{ after(grammarAccess.getLog_exprAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Log_expr__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Log_expr__Group_1__0__Impl
	rule__Log_expr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Log_expr__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLog_exprAccess().getLog_exprLeftAction_1_0()); }
	()
	{ after(grammarAccess.getLog_exprAccess().getLog_exprLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Log_expr__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Log_expr__Group_1__1__Impl
	rule__Log_expr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Log_expr__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLog_exprAccess().getOperatorAssignment_1_1()); }
	(rule__Log_expr__OperatorAssignment_1_1)
	{ after(grammarAccess.getLog_exprAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Log_expr__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Log_expr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Log_expr__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLog_exprAccess().getRightAssignment_1_2()); }
	(rule__Log_expr__RightAssignment_1_2)
	{ after(grammarAccess.getLog_exprAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or_expr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or_expr__Group__0__Impl
	rule__Or_expr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or_expr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOr_exprAccess().getAnd_exprParserRuleCall_0()); }
	ruleAnd_expr
	{ after(grammarAccess.getOr_exprAccess().getAnd_exprParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or_expr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or_expr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or_expr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOr_exprAccess().getGroup_1()); }
	(rule__Or_expr__Group_1__0)*
	{ after(grammarAccess.getOr_exprAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or_expr__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or_expr__Group_1__0__Impl
	rule__Or_expr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or_expr__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOr_exprAccess().getOr_exprLeftAction_1_0()); }
	()
	{ after(grammarAccess.getOr_exprAccess().getOr_exprLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or_expr__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or_expr__Group_1__1__Impl
	rule__Or_expr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Or_expr__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOr_exprAccess().getSolidusReverseSolidusKeyword_1_1()); }
	'/\\'
	{ after(grammarAccess.getOr_exprAccess().getSolidusReverseSolidusKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or_expr__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or_expr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or_expr__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOr_exprAccess().getRightAssignment_1_2()); }
	(rule__Or_expr__RightAssignment_1_2)
	{ after(grammarAccess.getOr_exprAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And_expr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And_expr__Group__0__Impl
	rule__And_expr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And_expr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnd_exprAccess().getAlternatives_0()); }
	(rule__And_expr__Alternatives_0)
	{ after(grammarAccess.getAnd_exprAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And_expr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And_expr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And_expr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnd_exprAccess().getGroup_1()); }
	(rule__And_expr__Group_1__0)*
	{ after(grammarAccess.getAnd_exprAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And_expr__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And_expr__Group_1__0__Impl
	rule__And_expr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And_expr__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnd_exprAccess().getAnd_exprLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAnd_exprAccess().getAnd_exprLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And_expr__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And_expr__Group_1__1__Impl
	rule__And_expr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__And_expr__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnd_exprAccess().getReverseSolidusSolidusKeyword_1_1()); }
	'\\/'
	{ after(grammarAccess.getAnd_exprAccess().getReverseSolidusSolidusKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And_expr__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And_expr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And_expr__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnd_exprAccess().getRightAssignment_1_2()); }
	(rule__And_expr__RightAssignment_1_2)
	{ after(grammarAccess.getAnd_exprAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Compare_expr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Compare_expr__Group__0__Impl
	rule__Compare_expr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare_expr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompare_exprAccess().getMath_exprParserRuleCall_0()); }
	rulemath_expr
	{ after(grammarAccess.getCompare_exprAccess().getMath_exprParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare_expr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Compare_expr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare_expr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompare_exprAccess().getGroup_1()); }
	(rule__Compare_expr__Group_1__0)*
	{ after(grammarAccess.getCompare_exprAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Compare_expr__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Compare_expr__Group_1__0__Impl
	rule__Compare_expr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare_expr__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompare_exprAccess().getCompare_exprLeftAction_1_0()); }
	()
	{ after(grammarAccess.getCompare_exprAccess().getCompare_exprLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare_expr__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Compare_expr__Group_1__1__Impl
	rule__Compare_expr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare_expr__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompare_exprAccess().getOperatorAssignment_1_1()); }
	(rule__Compare_expr__OperatorAssignment_1_1)
	{ after(grammarAccess.getCompare_exprAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare_expr__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Compare_expr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare_expr__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCompare_exprAccess().getRightAssignment_1_2()); }
	(rule__Compare_expr__RightAssignment_1_2)
	{ after(grammarAccess.getCompare_exprAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Math_expr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Math_expr__Group__0__Impl
	rule__Math_expr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Math_expr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMath_exprAccess().getTermParserRuleCall_0()); }
	ruleterm
	{ after(grammarAccess.getMath_exprAccess().getTermParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Math_expr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Math_expr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Math_expr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMath_exprAccess().getGroup_1()); }
	(rule__Math_expr__Group_1__0)*
	{ after(grammarAccess.getMath_exprAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Math_expr__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Math_expr__Group_1__0__Impl
	rule__Math_expr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Math_expr__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMath_exprAccess().getMath_exprLeftAction_1_0()); }
	()
	{ after(grammarAccess.getMath_exprAccess().getMath_exprLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Math_expr__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Math_expr__Group_1__1__Impl
	rule__Math_expr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Math_expr__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMath_exprAccess().getAlternatives_1_1()); }
	(rule__Math_expr__Alternatives_1_1)
	{ after(grammarAccess.getMath_exprAccess().getAlternatives_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Math_expr__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Math_expr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Math_expr__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMath_exprAccess().getRightAssignment_1_2()); }
	(rule__Math_expr__RightAssignment_1_2)
	{ after(grammarAccess.getMath_exprAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term__Group_0__0__Impl
	rule__Term__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermAccess().getLeftParenthesisKeyword_0_0()); }
	'('
	{ after(grammarAccess.getTermAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term__Group_0__1__Impl
	rule__Term__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermAccess().getConstraintParserRuleCall_0_1()); }
	ruleConstraint
	{ after(grammarAccess.getTermAccess().getConstraintParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermAccess().getRightParenthesisKeyword_0_2()); }
	')'
	{ after(grammarAccess.getTermAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term__Group_1__0__Impl
	rule__Term__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermAccess().getNotAction_1_0()); }
	()
	{ after(grammarAccess.getTermAccess().getNotAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term__Group_1__1__Impl
	rule__Term__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermAccess().getNotKeyword_1_1()); }
	'not'
	{ after(grammarAccess.getTermAccess().getNotKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Term__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTermAccess().getConstraintAssignment_1_2()); }
	(rule__Term__ConstraintAssignment_1_2)
	{ after(grammarAccess.getTermAccess().getConstraintAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_0__0__Impl
	rule__Atomic__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getConstantAction_0_0()); }
	()
	{ after(grammarAccess.getAtomicAccess().getConstantAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getValueAssignment_0_1()); }
	(rule__Atomic__ValueAssignment_0_1)
	{ after(grammarAccess.getAtomicAccess().getValueAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_1__0__Impl
	rule__Atomic__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getVarAction_1_0()); }
	()
	{ after(grammarAccess.getAtomicAccess().getVarAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getValueAssignment_1_1()); }
	(rule__Atomic__ValueAssignment_1_1)
	{ after(grammarAccess.getAtomicAccess().getValueAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Atomic__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_2__0__Impl
	rule__Atomic__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getStringAction_2_0()); }
	()
	{ after(grammarAccess.getAtomicAccess().getStringAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Atomic__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicAccess().getValueAssignment_2_1()); }
	(rule__Atomic__ValueAssignment_2_1)
	{ after(grammarAccess.getAtomicAccess().getValueAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableName__Group__0__Impl
	rule__VariableName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableNameAccess().getNameAssignment_0()); }
	(rule__VariableName__NameAssignment_0)
	{ after(grammarAccess.getVariableNameAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableNameAccess().getGroup_1()); }
	(rule__VariableName__Group_1__0)?
	{ after(grammarAccess.getVariableNameAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableName__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableName__Group_1__0__Impl
	rule__VariableName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableName__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableNameAccess().getLeftSquareBracketKeyword_1_0()); }
	'['
	{ after(grammarAccess.getVariableNameAccess().getLeftSquareBracketKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableName__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableName__Group_1__1__Impl
	rule__VariableName__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableName__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableNameAccess().getInstanceAssignment_1_1()); }
	(rule__VariableName__InstanceAssignment_1_1)
	{ after(grammarAccess.getVariableNameAccess().getInstanceAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableName__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableName__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableName__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableNameAccess().getRightSquareBracketKeyword_1_2()); }
	']'
	{ after(grammarAccess.getVariableNameAccess().getRightSquareBracketKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Group_most_least__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Group_most_least__Group__0__Impl
	rule__Group_most_least__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_most_least__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroup_most_leastAccess().getAlternatives_0()); }
	(rule__Group_most_least__Alternatives_0)
	{ after(grammarAccess.getGroup_most_leastAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_most_least__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Group_most_least__Group__1__Impl
	rule__Group_most_least__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_most_least__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroup_most_leastAccess().getInstancesAssignment_1()); }
	(rule__Group_most_least__InstancesAssignment_1)
	{ after(grammarAccess.getGroup_most_leastAccess().getInstancesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_most_least__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Group_most_least__Group__2__Impl
	rule__Group_most_least__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_most_least__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroup_most_leastAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getGroup_most_leastAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_most_least__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Group_most_least__Group__3__Impl
	rule__Group_most_least__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_most_least__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroup_most_leastAccess().getVariablesAssignment_3()); }
	(rule__Group_most_least__VariablesAssignment_3)
	{ after(grammarAccess.getGroup_most_leastAccess().getVariablesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_most_least__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Group_most_least__Group__4__Impl
	rule__Group_most_least__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_most_least__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroup_most_leastAccess().getRightSquareBracketKeyword_4()); }
	']'
	{ after(grammarAccess.getGroup_most_leastAccess().getRightSquareBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_most_least__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Group_most_least__Group__5__Impl
	rule__Group_most_least__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_most_least__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroup_most_leastAccess().getCommaKeyword_5()); }
	','
	{ after(grammarAccess.getGroup_most_leastAccess().getCommaKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_most_least__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Group_most_least__Group__6__Impl
	rule__Group_most_least__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_most_least__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroup_most_leastAccess().getAtomicAssignment_6()); }
	(rule__Group_most_least__AtomicAssignment_6)
	{ after(grammarAccess.getGroup_most_leastAccess().getAtomicAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_most_least__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Group_most_least__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_most_least__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroup_most_leastAccess().getRightParenthesisKeyword_7()); }
	')'
	{ after(grammarAccess.getGroup_most_leastAccess().getRightParenthesisKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Group_valuation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Group_valuation__Group__0__Impl
	rule__Group_valuation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_valuation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroup_valuationAccess().getAll_equalKeyword_0()); }
	'all_equal('
	{ after(grammarAccess.getGroup_valuationAccess().getAll_equalKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_valuation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Group_valuation__Group__1__Impl
	rule__Group_valuation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_valuation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroup_valuationAccess().getVarAssignment_1()); }
	(rule__Group_valuation__VarAssignment_1)
	{ after(grammarAccess.getGroup_valuationAccess().getVarAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_valuation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Group_valuation__Group__2__Impl
	rule__Group_valuation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_valuation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroup_valuationAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getGroup_valuationAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_valuation__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Group_valuation__Group__3__Impl
	rule__Group_valuation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_valuation__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroup_valuationAccess().getAtomicAssignment_3()); }
	(rule__Group_valuation__AtomicAssignment_3)
	{ after(grammarAccess.getGroup_valuationAccess().getAtomicAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_valuation__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Group_valuation__Group__4__Impl
	rule__Group_valuation__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_valuation__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroup_valuationAccess().getRightSquareBracketKeyword_4()); }
	']'
	{ after(grammarAccess.getGroup_valuationAccess().getRightSquareBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_valuation__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Group_valuation__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_valuation__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGroup_valuationAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getGroup_valuationAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Max_Min__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Max_Min__Group__0__Impl
	rule__Max_Min__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Max_Min__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMax_MinAccess().getAlternatives_0()); }
	(rule__Max_Min__Alternatives_0)
	{ after(grammarAccess.getMax_MinAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Max_Min__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Max_Min__Group__1__Impl
	rule__Max_Min__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Max_Min__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMax_MinAccess().getVarAssignment_1()); }
	(rule__Max_Min__VarAssignment_1)
	{ after(grammarAccess.getMax_MinAccess().getVarAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Max_Min__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Max_Min__Group__2__Impl
	rule__Max_Min__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Max_Min__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMax_MinAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getMax_MinAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Max_Min__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Max_Min__Group__3__Impl
	rule__Max_Min__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Max_Min__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMax_MinAccess().getVarAssignment_3()); }
	(rule__Max_Min__VarAssignment_3)
	{ after(grammarAccess.getMax_MinAccess().getVarAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Max_Min__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Max_Min__Group__4__Impl
	rule__Max_Min__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Max_Min__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMax_MinAccess().getRightSquareBracketKeyword_4()); }
	']'
	{ after(grammarAccess.getMax_MinAccess().getRightSquareBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Max_Min__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Max_Min__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Max_Min__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMax_MinAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getMax_MinAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarEnumeration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarEnumeration__Group__0__Impl
	rule__VarEnumeration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarEnumeration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarEnumerationAccess().getLeftSquareBracketKeyword_0()); }
	'['
	{ after(grammarAccess.getVarEnumerationAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarEnumeration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarEnumeration__Group__1__Impl
	rule__VarEnumeration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarEnumeration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarEnumerationAccess().getVarNameAssignment_1()); }
	(rule__VarEnumeration__VarNameAssignment_1)
	{ after(grammarAccess.getVarEnumerationAccess().getVarNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarEnumeration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarEnumeration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarEnumeration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getVarEnumerationAccess().getGroup_2()); }
		(rule__VarEnumeration__Group_2__0)
		{ after(grammarAccess.getVarEnumerationAccess().getGroup_2()); }
	)
	(
		{ before(grammarAccess.getVarEnumerationAccess().getGroup_2()); }
		(rule__VarEnumeration__Group_2__0)*
		{ after(grammarAccess.getVarEnumerationAccess().getGroup_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarEnumeration__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarEnumeration__Group_2__0__Impl
	rule__VarEnumeration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarEnumeration__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarEnumerationAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getVarEnumerationAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarEnumeration__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarEnumeration__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarEnumeration__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarEnumerationAccess().getVarNameAssignment_2_1()); }
	(rule__VarEnumeration__VarNameAssignment_2_1)
	{ after(grammarAccess.getVarEnumerationAccess().getVarNameAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FQN__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FQN__Group__0__Impl
	rule__FQN__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
	{ after(grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FQN__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFQNAccess().getGroup_1()); }
	(rule__FQN__Group_1__0)*
	{ after(grammarAccess.getFQNAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FQN__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FQN__Group_1__0__Impl
	rule__FQN__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FQN__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FQN__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
	{ after(grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Constant__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constant__Group_1__0__Impl
	rule__Constant__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantAccess().getINTTerminalRuleCall_1_0()); }
	RULE_INT
	{ after(grammarAccess.getConstantAccess().getINTTerminalRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constant__Group_1__1__Impl
	rule__Constant__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantAccess().getFullStopKeyword_1_1()); }
	'.'
	{ after(grammarAccess.getConstantAccess().getFullStopKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constant__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantAccess().getINTTerminalRuleCall_1_2()); }
	RULE_INT
	{ after(grammarAccess.getConstantAccess().getINTTerminalRuleCall_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__VariableAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getVariableVariableParserRuleCall_2_0()); }
		ruleVariable
		{ after(grammarAccess.getModelAccess().getVariableVariableParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__FlexConstraintsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getFlexConstraintsConstraintParserRuleCall_3_0()); }
		ruleConstraint
		{ after(grammarAccess.getModelAccess().getFlexConstraintsConstraintParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__StateAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getStateStateParserRuleCall_4_0()); }
		ruleState
		{ after(grammarAccess.getModelAccess().getStateStateParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__TransitionAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getTransitionTransitionParserRuleCall_5_0()); }
		ruleTransition
		{ after(grammarAccess.getModelAccess().getTransitionTransitionParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__VarTypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getVarTypeVarTypeParserRuleCall_0_0()); }
		ruleVarType
		{ after(grammarAccess.getVariableAccess().getVarTypeVarTypeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__ContextAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getContextParamKeyword_1_0()); }
		(
			{ before(grammarAccess.getVariableAccess().getContextParamKeyword_1_0()); }
			'Param'
			{ after(grammarAccess.getVariableAccess().getContextParamKeyword_1_0()); }
		)
		{ after(grammarAccess.getVariableAccess().getContextParamKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__InEnumerationAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getInEnumerationEnumKeyword_2_0()); }
		(
			{ before(grammarAccess.getVariableAccess().getInEnumerationEnumKeyword_2_0()); }
			'Enum'
			{ after(grammarAccess.getVariableAccess().getInEnumerationEnumKeyword_2_0()); }
		)
		{ after(grammarAccess.getVariableAccess().getInEnumerationEnumKeyword_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__IsMultiInstanciatedAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getIsMultiInstanciatedMultipleParserRuleCall_4_0()); }
		rulemultiple
		{ after(grammarAccess.getVariableAccess().getIsMultiInstanciatedMultipleParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__DomainAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getDomainDomainParserRuleCall_5_0()); }
		ruleDomain
		{ after(grammarAccess.getVariableAccess().getDomainDomainParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__ValuesAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getValuesEnumerationParserRuleCall_6_0()); }
		ruleEnumeration
		{ after(grammarAccess.getVariableAccess().getValuesEnumerationParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiple__MinimumAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultipleAccess().getMinimumMinParserRuleCall_1_0()); }
		rulemin
		{ after(grammarAccess.getMultipleAccess().getMinimumMinParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiple__MaximumAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultipleAccess().getMaximumMaxParserRuleCall_3_0()); }
		rulemax
		{ after(grammarAccess.getMultipleAccess().getMaximumMaxParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StartTransition__TargetStateAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStartTransitionAccess().getTargetStateStateCrossReference_3_0()); }
		(
			{ before(grammarAccess.getStartTransitionAccess().getTargetStateStateFQNParserRuleCall_3_0_1()); }
			ruleFQN
			{ after(grammarAccess.getStartTransitionAccess().getTargetStateStateFQNParserRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getStartTransitionAccess().getTargetStateStateCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EndTransition__SourceStateAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEndTransitionAccess().getSourceStateStateCrossReference_3_0()); }
		(
			{ before(grammarAccess.getEndTransitionAccess().getSourceStateStateFQNParserRuleCall_3_0_1()); }
			ruleFQN
			{ after(grammarAccess.getEndTransitionAccess().getSourceStateStateFQNParserRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getEndTransitionAccess().getSourceStateStateCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FullTransition__StateAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFullTransitionAccess().getStateStateCrossReference_0_1_0()); }
		(
			{ before(grammarAccess.getFullTransitionAccess().getStateStateFQNParserRuleCall_0_1_0_1()); }
			ruleFQN
			{ after(grammarAccess.getFullTransitionAccess().getStateStateFQNParserRuleCall_0_1_0_1()); }
		)
		{ after(grammarAccess.getFullTransitionAccess().getStateStateCrossReference_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FullTransition__EventAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFullTransitionAccess().getEventEventParserRuleCall_2_0()); }
		ruleEvent
		{ after(grammarAccess.getFullTransitionAccess().getEventEventParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FullTransition__SourceStateAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFullTransitionAccess().getSourceStateStateCrossReference_5_0()); }
		(
			{ before(grammarAccess.getFullTransitionAccess().getSourceStateStateFQNParserRuleCall_5_0_1()); }
			ruleFQN
			{ after(grammarAccess.getFullTransitionAccess().getSourceStateStateFQNParserRuleCall_5_0_1()); }
		)
		{ after(grammarAccess.getFullTransitionAccess().getSourceStateStateCrossReference_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FullTransition__TargetStateAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFullTransitionAccess().getTargetStateStateCrossReference_7_0()); }
		(
			{ before(grammarAccess.getFullTransitionAccess().getTargetStateStateFQNParserRuleCall_7_0_1()); }
			ruleFQN
			{ after(grammarAccess.getFullTransitionAccess().getTargetStateStateFQNParserRuleCall_7_0_1()); }
		)
		{ after(grammarAccess.getFullTransitionAccess().getTargetStateStateCrossReference_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__EvOccAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventAccess().getEvOccEventOccurenceParserRuleCall_1_0()); }
		ruleEventOccurence
		{ after(grammarAccess.getEventAccess().getEvOccEventOccurenceParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__OperatorAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventAccess().getOperatorAlternatives_2_0()); }
		(rule__Event__OperatorAlternatives_2_0)
		{ after(grammarAccess.getEventAccess().getOperatorAlternatives_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__SttOccAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventAccess().getSttOccStateOccurenceParserRuleCall_3_0()); }
		ruleStateOccurence
		{ after(grammarAccess.getEventAccess().getSttOccStateOccurenceParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventOccurence__EventExpressionAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventOccurenceAccess().getEventExpressionConstraintParserRuleCall_0()); }
		ruleConstraint
		{ after(grammarAccess.getEventOccurenceAccess().getEventExpressionConstraintParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateOccurence__StateExpressionAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateOccurenceAccess().getStateExpressionStateConstraintParserRuleCall_0()); }
		ruleStateConstraint
		{ after(grammarAccess.getStateOccurenceAccess().getStateExpressionStateConstraintParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or_state__RipeAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOr_stateAccess().getRipeAnd_stateParserRuleCall_1_2_0()); }
		ruleAnd_state
		{ after(grammarAccess.getOr_stateAccess().getRipeAnd_stateParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__And_state__RipeAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAnd_stateAccess().getRipeStateNameParserRuleCall_1_2_0()); }
		ruleStateName
		{ after(grammarAccess.getAnd_stateAccess().getRipeStateNameParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateName__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateNameAccess().getValueStateCrossReference_1_0()); }
		(
			{ before(grammarAccess.getStateNameAccess().getValueStateFQNParserRuleCall_1_0_1()); }
			ruleFQN
			{ after(grammarAccess.getStateNameAccess().getValueStateFQNParserRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getStateNameAccess().getValueStateCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeState__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompositeStateAccess().getTypeCompositeStateKeyword_0_0()); }
		(
			{ before(grammarAccess.getCompositeStateAccess().getTypeCompositeStateKeyword_0_0()); }
			'compositeState'
			{ after(grammarAccess.getCompositeStateAccess().getTypeCompositeStateKeyword_0_0()); }
		)
		{ after(grammarAccess.getCompositeStateAccess().getTypeCompositeStateKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeState__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompositeStateAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getCompositeStateAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeState__ConcernlevelAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompositeStateAccess().getConcernlevelConcernLevelParserRuleCall_2_0()); }
		ruleConcernLevel
		{ after(grammarAccess.getCompositeStateAccess().getConcernlevelConcernLevelParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeState__EndCompositeStateAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompositeStateAccess().getEndCompositeStateCompositeStateCrossReference_4_0()); }
		(
			{ before(grammarAccess.getCompositeStateAccess().getEndCompositeStateCompositeStateIDTerminalRuleCall_4_0_1()); }
			RULE_ID
			{ after(grammarAccess.getCompositeStateAccess().getEndCompositeStateCompositeStateIDTerminalRuleCall_4_0_1()); }
		)
		{ after(grammarAccess.getCompositeStateAccess().getEndCompositeStateCompositeStateCrossReference_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcernLevel__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConcernLevelAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getConcernLevelAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcernLevel__StateAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConcernLevelAccess().getStateStateParserRuleCall_2_0()); }
		ruleState
		{ after(grammarAccess.getConcernLevelAccess().getStateStateParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConcernLevel__EndConcernLevelAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConcernLevelAccess().getEndConcernLevelConcernLevelCrossReference_4_0()); }
		(
			{ before(grammarAccess.getConcernLevelAccess().getEndConcernLevelConcernLevelIDTerminalRuleCall_4_0_1()); }
			RULE_ID
			{ after(grammarAccess.getConcernLevelAccess().getEndConcernLevelConcernLevelIDTerminalRuleCall_4_0_1()); }
		)
		{ after(grammarAccess.getConcernLevelAccess().getEndConcernLevelConcernLevelCrossReference_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleConstraintState__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleConstraintStateAccess().getTypeSimpleConstraintStateKeyword_0_0()); }
		(
			{ before(grammarAccess.getSimpleConstraintStateAccess().getTypeSimpleConstraintStateKeyword_0_0()); }
			'simpleConstraintState'
			{ after(grammarAccess.getSimpleConstraintStateAccess().getTypeSimpleConstraintStateKeyword_0_0()); }
		)
		{ after(grammarAccess.getSimpleConstraintStateAccess().getTypeSimpleConstraintStateKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleConstraintState__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleConstraintStateAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getSimpleConstraintStateAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleConstraintState__NewVariableAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleConstraintStateAccess().getNewVariableVariableParserRuleCall_2_0()); }
		ruleVariable
		{ after(grammarAccess.getSimpleConstraintStateAccess().getNewVariableVariableParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleConstraintState__ConstraintAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleConstraintStateAccess().getConstraintConstraintParserRuleCall_3_0()); }
		ruleConstraint
		{ after(grammarAccess.getSimpleConstraintStateAccess().getConstraintConstraintParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Log_expr__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLog_exprAccess().getOperatorAlternatives_1_1_0()); }
		(rule__Log_expr__OperatorAlternatives_1_1_0)
		{ after(grammarAccess.getLog_exprAccess().getOperatorAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Log_expr__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLog_exprAccess().getRightOr_exprParserRuleCall_1_2_0()); }
		ruleOr_expr
		{ after(grammarAccess.getLog_exprAccess().getRightOr_exprParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or_expr__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOr_exprAccess().getRightAnd_exprParserRuleCall_1_2_0()); }
		ruleAnd_expr
		{ after(grammarAccess.getOr_exprAccess().getRightAnd_exprParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__And_expr__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAnd_exprAccess().getRightCompare_exprParserRuleCall_1_2_0()); }
		ruleCompare_expr
		{ after(grammarAccess.getAnd_exprAccess().getRightCompare_exprParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare_expr__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompare_exprAccess().getOperatorAlternatives_1_1_0()); }
		(rule__Compare_expr__OperatorAlternatives_1_1_0)
		{ after(grammarAccess.getCompare_exprAccess().getOperatorAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Compare_expr__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCompare_exprAccess().getRightMath_exprParserRuleCall_1_2_0()); }
		rulemath_expr
		{ after(grammarAccess.getCompare_exprAccess().getRightMath_exprParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Math_expr__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMath_exprAccess().getRightTermParserRuleCall_1_2_0()); }
		ruleterm
		{ after(grammarAccess.getMath_exprAccess().getRightTermParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__ConstraintAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTermAccess().getConstraintTermParserRuleCall_1_2_0()); }
		ruleterm
		{ after(grammarAccess.getTermAccess().getConstraintTermParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ValueAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getValueConstantParserRuleCall_0_1_0()); }
		ruleConstant
		{ after(grammarAccess.getAtomicAccess().getValueConstantParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ValueAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getValueVariableNameParserRuleCall_1_1_0()); }
		ruleVariableName
		{ after(grammarAccess.getAtomicAccess().getValueVariableNameParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Atomic__ValueAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicAccess().getValueStringsParserRuleCall_2_1_0()); }
		rulestrings
		{ after(grammarAccess.getAtomicAccess().getValueStringsParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableName__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableNameAccess().getNameVariableCrossReference_0_0()); }
		(
			{ before(grammarAccess.getVariableNameAccess().getNameVariableIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getVariableNameAccess().getNameVariableIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getVariableNameAccess().getNameVariableCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableName__InstanceAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableNameAccess().getInstanceIntValueParserRuleCall_1_1_0()); }
		ruleIntValue
		{ after(grammarAccess.getVariableNameAccess().getInstanceIntValueParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_most_least__InstancesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGroup_most_leastAccess().getInstancesIntValueParserRuleCall_1_0()); }
		ruleIntValue
		{ after(grammarAccess.getGroup_most_leastAccess().getInstancesIntValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_most_least__VariablesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGroup_most_leastAccess().getVariablesVarEnumerationParserRuleCall_3_0()); }
		rulevarEnumeration
		{ after(grammarAccess.getGroup_most_leastAccess().getVariablesVarEnumerationParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_most_least__AtomicAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGroup_most_leastAccess().getAtomicAtomicParserRuleCall_6_0()); }
		ruleAtomic
		{ after(grammarAccess.getGroup_most_leastAccess().getAtomicAtomicParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_valuation__VarAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGroup_valuationAccess().getVarVarEnumerationParserRuleCall_1_0()); }
		rulevarEnumeration
		{ after(grammarAccess.getGroup_valuationAccess().getVarVarEnumerationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_valuation__AtomicAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGroup_valuationAccess().getAtomicAtomicParserRuleCall_3_0()); }
		ruleAtomic
		{ after(grammarAccess.getGroup_valuationAccess().getAtomicAtomicParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Max_Min__VarAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMax_MinAccess().getVarVariableNameParserRuleCall_1_0()); }
		ruleVariableName
		{ after(grammarAccess.getMax_MinAccess().getVarVariableNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Max_Min__VarAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMax_MinAccess().getVarVarEnumerationParserRuleCall_3_0()); }
		rulevarEnumeration
		{ after(grammarAccess.getMax_MinAccess().getVarVarEnumerationParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarEnumeration__VarNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarEnumerationAccess().getVarNameVariableNameParserRuleCall_1_0()); }
		ruleVariableName
		{ after(grammarAccess.getVarEnumerationAccess().getVarNameVariableNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarEnumeration__VarNameAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarEnumerationAccess().getVarNameVariableNameParserRuleCall_2_1_0()); }
		ruleVariableName
		{ after(grammarAccess.getVarEnumerationAccess().getVarNameVariableNameParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
