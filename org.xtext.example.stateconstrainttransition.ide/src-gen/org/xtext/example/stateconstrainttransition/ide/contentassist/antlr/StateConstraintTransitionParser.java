/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.stateconstrainttransition.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xtext.example.stateconstrainttransition.ide.contentassist.antlr.internal.InternalStateConstraintTransitionParser;
import org.xtext.example.stateconstrainttransition.services.StateConstraintTransitionGrammarAccess;

public class StateConstraintTransitionParser extends AbstractContentAssistParser {

	@Inject
	private StateConstraintTransitionGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalStateConstraintTransitionParser createParser() {
		InternalStateConstraintTransitionParser result = new InternalStateConstraintTransitionParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getVarTypeAccess().getAlternatives(), "rule__VarType__Alternatives");
					put(grammarAccess.getDomainAccess().getAlternatives(), "rule__Domain__Alternatives");
					put(grammarAccess.getEnumerationAccess().getAlternatives(), "rule__Enumeration__Alternatives");
					put(grammarAccess.getStateAccess().getAlternatives(), "rule__State__Alternatives");
					put(grammarAccess.getTransitionAccess().getAlternatives(), "rule__Transition__Alternatives");
					put(grammarAccess.getEventAccess().getOperatorAlternatives_2_0(), "rule__Event__OperatorAlternatives_2_0");
					put(grammarAccess.getLog_exprAccess().getOperatorAlternatives_1_1_0(), "rule__Log_expr__OperatorAlternatives_1_1_0");
					put(grammarAccess.getAnd_exprAccess().getAlternatives_0(), "rule__And_expr__Alternatives_0");
					put(grammarAccess.getCompare_exprAccess().getOperatorAlternatives_1_1_0(), "rule__Compare_expr__OperatorAlternatives_1_1_0");
					put(grammarAccess.getMath_exprAccess().getAlternatives_1_1(), "rule__Math_expr__Alternatives_1_1");
					put(grammarAccess.getTermAccess().getAlternatives(), "rule__Term__Alternatives");
					put(grammarAccess.getAtomicAccess().getAlternatives(), "rule__Atomic__Alternatives");
					put(grammarAccess.getGlobalConstraintAccess().getAlternatives(), "rule__GlobalConstraint__Alternatives");
					put(grammarAccess.getGroup_most_leastAccess().getAlternatives_0(), "rule__Group_most_least__Alternatives_0");
					put(grammarAccess.getMax_MinAccess().getAlternatives_0(), "rule__Max_Min__Alternatives_0");
					put(grammarAccess.getIntValueAccess().getAlternatives(), "rule__IntValue__Alternatives");
					put(grammarAccess.getConstantAccess().getAlternatives(), "rule__Constant__Alternatives");
					put(grammarAccess.getConstantAccess().getAlternatives_2(), "rule__Constant__Alternatives_2");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
					put(grammarAccess.getMultipleAccess().getGroup(), "rule__Multiple__Group__0");
					put(grammarAccess.getFloatDomainAccess().getGroup(), "rule__FloatDomain__Group__0");
					put(grammarAccess.getIntDomainAccess().getGroup(), "rule__IntDomain__Group__0");
					put(grammarAccess.getIntEnumerationAccess().getGroup(), "rule__IntEnumeration__Group__0");
					put(grammarAccess.getIntEnumerationAccess().getGroup_2(), "rule__IntEnumeration__Group_2__0");
					put(grammarAccess.getStringEnumerationAccess().getGroup(), "rule__StringEnumeration__Group__0");
					put(grammarAccess.getStringEnumerationAccess().getGroup_2(), "rule__StringEnumeration__Group_2__0");
					put(grammarAccess.getStartTransitionAccess().getGroup(), "rule__StartTransition__Group__0");
					put(grammarAccess.getEndTransitionAccess().getGroup(), "rule__EndTransition__Group__0");
					put(grammarAccess.getFullTransitionAccess().getGroup(), "rule__FullTransition__Group__0");
					put(grammarAccess.getFullTransitionAccess().getGroup_0(), "rule__FullTransition__Group_0__0");
					put(grammarAccess.getEventAccess().getGroup(), "rule__Event__Group__0");
					put(grammarAccess.getOr_stateAccess().getGroup(), "rule__Or_state__Group__0");
					put(grammarAccess.getOr_stateAccess().getGroup_1(), "rule__Or_state__Group_1__0");
					put(grammarAccess.getAnd_stateAccess().getGroup(), "rule__And_state__Group__0");
					put(grammarAccess.getAnd_stateAccess().getGroup_1(), "rule__And_state__Group_1__0");
					put(grammarAccess.getStateNameAccess().getGroup(), "rule__StateName__Group__0");
					put(grammarAccess.getCompositeStateAccess().getGroup(), "rule__CompositeState__Group__0");
					put(grammarAccess.getConcernLevelAccess().getGroup(), "rule__ConcernLevel__Group__0");
					put(grammarAccess.getSimpleConstraintStateAccess().getGroup(), "rule__SimpleConstraintState__Group__0");
					put(grammarAccess.getLog_exprAccess().getGroup(), "rule__Log_expr__Group__0");
					put(grammarAccess.getLog_exprAccess().getGroup_1(), "rule__Log_expr__Group_1__0");
					put(grammarAccess.getOr_exprAccess().getGroup(), "rule__Or_expr__Group__0");
					put(grammarAccess.getOr_exprAccess().getGroup_1(), "rule__Or_expr__Group_1__0");
					put(grammarAccess.getAnd_exprAccess().getGroup(), "rule__And_expr__Group__0");
					put(grammarAccess.getAnd_exprAccess().getGroup_1(), "rule__And_expr__Group_1__0");
					put(grammarAccess.getCompare_exprAccess().getGroup(), "rule__Compare_expr__Group__0");
					put(grammarAccess.getCompare_exprAccess().getGroup_1(), "rule__Compare_expr__Group_1__0");
					put(grammarAccess.getMath_exprAccess().getGroup(), "rule__Math_expr__Group__0");
					put(grammarAccess.getMath_exprAccess().getGroup_1(), "rule__Math_expr__Group_1__0");
					put(grammarAccess.getTermAccess().getGroup_0(), "rule__Term__Group_0__0");
					put(grammarAccess.getTermAccess().getGroup_1(), "rule__Term__Group_1__0");
					put(grammarAccess.getAtomicAccess().getGroup_0(), "rule__Atomic__Group_0__0");
					put(grammarAccess.getAtomicAccess().getGroup_1(), "rule__Atomic__Group_1__0");
					put(grammarAccess.getAtomicAccess().getGroup_2(), "rule__Atomic__Group_2__0");
					put(grammarAccess.getVariableNameAccess().getGroup(), "rule__VariableName__Group__0");
					put(grammarAccess.getVariableNameAccess().getGroup_1(), "rule__VariableName__Group_1__0");
					put(grammarAccess.getGroup_most_leastAccess().getGroup(), "rule__Group_most_least__Group__0");
					put(grammarAccess.getGroup_valuationAccess().getGroup(), "rule__Group_valuation__Group__0");
					put(grammarAccess.getMax_MinAccess().getGroup(), "rule__Max_Min__Group__0");
					put(grammarAccess.getVarEnumerationAccess().getGroup(), "rule__VarEnumeration__Group__0");
					put(grammarAccess.getVarEnumerationAccess().getGroup_2(), "rule__VarEnumeration__Group_2__0");
					put(grammarAccess.getFQNAccess().getGroup(), "rule__FQN__Group__0");
					put(grammarAccess.getFQNAccess().getGroup_1(), "rule__FQN__Group_1__0");
					put(grammarAccess.getConstantAccess().getGroup_1(), "rule__Constant__Group_1__0");
					put(grammarAccess.getModelAccess().getNameAssignment_1(), "rule__Model__NameAssignment_1");
					put(grammarAccess.getModelAccess().getVariableAssignment_2(), "rule__Model__VariableAssignment_2");
					put(grammarAccess.getModelAccess().getFlexConstraintsAssignment_3(), "rule__Model__FlexConstraintsAssignment_3");
					put(grammarAccess.getModelAccess().getStateAssignment_4(), "rule__Model__StateAssignment_4");
					put(grammarAccess.getModelAccess().getTransitionAssignment_5(), "rule__Model__TransitionAssignment_5");
					put(grammarAccess.getVariableAccess().getVarTypeAssignment_0(), "rule__Variable__VarTypeAssignment_0");
					put(grammarAccess.getVariableAccess().getContextAssignment_1(), "rule__Variable__ContextAssignment_1");
					put(grammarAccess.getVariableAccess().getInEnumerationAssignment_2(), "rule__Variable__InEnumerationAssignment_2");
					put(grammarAccess.getVariableAccess().getNameAssignment_3(), "rule__Variable__NameAssignment_3");
					put(grammarAccess.getVariableAccess().getIsMultiInstanciatedAssignment_4(), "rule__Variable__IsMultiInstanciatedAssignment_4");
					put(grammarAccess.getVariableAccess().getDomainAssignment_5(), "rule__Variable__DomainAssignment_5");
					put(grammarAccess.getVariableAccess().getValuesAssignment_6(), "rule__Variable__ValuesAssignment_6");
					put(grammarAccess.getMultipleAccess().getMinimumAssignment_1(), "rule__Multiple__MinimumAssignment_1");
					put(grammarAccess.getMultipleAccess().getMaximumAssignment_3(), "rule__Multiple__MaximumAssignment_3");
					put(grammarAccess.getStartTransitionAccess().getTargetStateAssignment_3(), "rule__StartTransition__TargetStateAssignment_3");
					put(grammarAccess.getEndTransitionAccess().getSourceStateAssignment_3(), "rule__EndTransition__SourceStateAssignment_3");
					put(grammarAccess.getFullTransitionAccess().getStateAssignment_0_1(), "rule__FullTransition__StateAssignment_0_1");
					put(grammarAccess.getFullTransitionAccess().getEventAssignment_2(), "rule__FullTransition__EventAssignment_2");
					put(grammarAccess.getFullTransitionAccess().getSourceStateAssignment_5(), "rule__FullTransition__SourceStateAssignment_5");
					put(grammarAccess.getFullTransitionAccess().getTargetStateAssignment_7(), "rule__FullTransition__TargetStateAssignment_7");
					put(grammarAccess.getEventAccess().getEvOccAssignment_1(), "rule__Event__EvOccAssignment_1");
					put(grammarAccess.getEventAccess().getOperatorAssignment_2(), "rule__Event__OperatorAssignment_2");
					put(grammarAccess.getEventAccess().getSttOccAssignment_3(), "rule__Event__SttOccAssignment_3");
					put(grammarAccess.getEventOccurenceAccess().getEventExpressionAssignment(), "rule__EventOccurence__EventExpressionAssignment");
					put(grammarAccess.getStateOccurenceAccess().getStateExpressionAssignment(), "rule__StateOccurence__StateExpressionAssignment");
					put(grammarAccess.getOr_stateAccess().getRipeAssignment_1_2(), "rule__Or_state__RipeAssignment_1_2");
					put(grammarAccess.getAnd_stateAccess().getRipeAssignment_1_2(), "rule__And_state__RipeAssignment_1_2");
					put(grammarAccess.getStateNameAccess().getValueAssignment_1(), "rule__StateName__ValueAssignment_1");
					put(grammarAccess.getCompositeStateAccess().getTypeAssignment_0(), "rule__CompositeState__TypeAssignment_0");
					put(grammarAccess.getCompositeStateAccess().getNameAssignment_1(), "rule__CompositeState__NameAssignment_1");
					put(grammarAccess.getCompositeStateAccess().getConcernlevelAssignment_2(), "rule__CompositeState__ConcernlevelAssignment_2");
					put(grammarAccess.getCompositeStateAccess().getEndCompositeStateAssignment_4(), "rule__CompositeState__EndCompositeStateAssignment_4");
					put(grammarAccess.getConcernLevelAccess().getNameAssignment_1(), "rule__ConcernLevel__NameAssignment_1");
					put(grammarAccess.getConcernLevelAccess().getStateAssignment_2(), "rule__ConcernLevel__StateAssignment_2");
					put(grammarAccess.getConcernLevelAccess().getEndConcernLevelAssignment_4(), "rule__ConcernLevel__EndConcernLevelAssignment_4");
					put(grammarAccess.getSimpleConstraintStateAccess().getTypeAssignment_0(), "rule__SimpleConstraintState__TypeAssignment_0");
					put(grammarAccess.getSimpleConstraintStateAccess().getNameAssignment_1(), "rule__SimpleConstraintState__NameAssignment_1");
					put(grammarAccess.getSimpleConstraintStateAccess().getNewVariableAssignment_2(), "rule__SimpleConstraintState__NewVariableAssignment_2");
					put(grammarAccess.getSimpleConstraintStateAccess().getConstraintAssignment_3(), "rule__SimpleConstraintState__ConstraintAssignment_3");
					put(grammarAccess.getLog_exprAccess().getOperatorAssignment_1_1(), "rule__Log_expr__OperatorAssignment_1_1");
					put(grammarAccess.getLog_exprAccess().getRightAssignment_1_2(), "rule__Log_expr__RightAssignment_1_2");
					put(grammarAccess.getOr_exprAccess().getRightAssignment_1_2(), "rule__Or_expr__RightAssignment_1_2");
					put(grammarAccess.getAnd_exprAccess().getRightAssignment_1_2(), "rule__And_expr__RightAssignment_1_2");
					put(grammarAccess.getCompare_exprAccess().getOperatorAssignment_1_1(), "rule__Compare_expr__OperatorAssignment_1_1");
					put(grammarAccess.getCompare_exprAccess().getRightAssignment_1_2(), "rule__Compare_expr__RightAssignment_1_2");
					put(grammarAccess.getMath_exprAccess().getRightAssignment_1_2(), "rule__Math_expr__RightAssignment_1_2");
					put(grammarAccess.getTermAccess().getConstraintAssignment_1_2(), "rule__Term__ConstraintAssignment_1_2");
					put(grammarAccess.getAtomicAccess().getValueAssignment_0_1(), "rule__Atomic__ValueAssignment_0_1");
					put(grammarAccess.getAtomicAccess().getValueAssignment_1_1(), "rule__Atomic__ValueAssignment_1_1");
					put(grammarAccess.getAtomicAccess().getValueAssignment_2_1(), "rule__Atomic__ValueAssignment_2_1");
					put(grammarAccess.getVariableNameAccess().getNameAssignment_0(), "rule__VariableName__NameAssignment_0");
					put(grammarAccess.getVariableNameAccess().getInstanceAssignment_1_1(), "rule__VariableName__InstanceAssignment_1_1");
					put(grammarAccess.getGroup_most_leastAccess().getInstancesAssignment_1(), "rule__Group_most_least__InstancesAssignment_1");
					put(grammarAccess.getGroup_most_leastAccess().getVariablesAssignment_3(), "rule__Group_most_least__VariablesAssignment_3");
					put(grammarAccess.getGroup_most_leastAccess().getAtomicAssignment_6(), "rule__Group_most_least__AtomicAssignment_6");
					put(grammarAccess.getGroup_valuationAccess().getVarAssignment_1(), "rule__Group_valuation__VarAssignment_1");
					put(grammarAccess.getGroup_valuationAccess().getAtomicAssignment_3(), "rule__Group_valuation__AtomicAssignment_3");
					put(grammarAccess.getMax_MinAccess().getVarAssignment_1(), "rule__Max_Min__VarAssignment_1");
					put(grammarAccess.getMax_MinAccess().getVarAssignment_3(), "rule__Max_Min__VarAssignment_3");
					put(grammarAccess.getVarEnumerationAccess().getVarNameAssignment_1(), "rule__VarEnumeration__VarNameAssignment_1");
					put(grammarAccess.getVarEnumerationAccess().getVarNameAssignment_2_1(), "rule__VarEnumeration__VarNameAssignment_2_1");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalStateConstraintTransitionParser typedParser = (InternalStateConstraintTransitionParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public StateConstraintTransitionGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(StateConstraintTransitionGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
