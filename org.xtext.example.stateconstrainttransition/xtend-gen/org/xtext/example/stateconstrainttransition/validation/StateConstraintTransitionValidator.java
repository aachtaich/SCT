/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.stateconstrainttransition.validation;

import com.google.common.base.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.validation.Check;
import org.xtext.example.stateconstrainttransition.stateConstraintTransition.StateConstraintTransitionPackage;
import org.xtext.example.stateconstrainttransition.stateConstraintTransition.Variable;
import org.xtext.example.stateconstrainttransition.stateConstraintTransition.VariableName;
import org.xtext.example.stateconstrainttransition.stateConstraintTransition.multiple;
import org.xtext.example.stateconstrainttransition.validation.AbstractStateConstraintTransitionValidator;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class StateConstraintTransitionValidator extends AbstractStateConstraintTransitionValidator {
  public final static String INVALID_CARDINALITY = "invalidName";
  
  @Check
  public void checkVariableCardinality(final VariableName variableName) {
    Variable _name = variableName.getName();
    String nameOfVariable = _name.getName();
    Variable _name_1 = variableName.getName();
    multiple _isMultiInstanciated = _name_1.getIsMultiInstanciated();
    boolean _equals = Objects.equal(_isMultiInstanciated, null);
    if (_equals) {
      String _instance = variableName.getInstance();
      boolean _notEquals = (!Objects.equal(_instance, null));
      if (_notEquals) {
        EReference _variableName_Name = StateConstraintTransitionPackage.eINSTANCE.getVariableName_Name();
        this.error((nameOfVariable + "canno\'t be multi-instantiated"), variableName, _variableName_Name);
      }
    }
    Variable _name_2 = variableName.getName();
    multiple _isMultiInstanciated_1 = _name_2.getIsMultiInstanciated();
    boolean _notEquals_1 = (!Objects.equal(_isMultiInstanciated_1, null));
    if (_notEquals_1) {
      String _instance_1 = variableName.getInstance();
      boolean _equals_1 = Objects.equal(_instance_1, null);
      if (_equals_1) {
        EReference _variableName_Name_1 = StateConstraintTransitionPackage.eINSTANCE.getVariableName_Name();
        this.error((("Multi-instantiated variable! Must specify instance i.e. " + nameOfVariable) + "[instance]"), variableName, _variableName_Name_1, StateConstraintTransitionValidator.INVALID_CARDINALITY);
      } else {
        String _instance_2 = variableName.getInstance();
        int currentVariableCardinality = Integer.parseInt(_instance_2);
        if (((currentVariableCardinality > Integer.parseInt(variableName.getName().getIsMultiInstanciated().getMaximum().get(0))) || (currentVariableCardinality == 0))) {
          Variable _name_3 = variableName.getName();
          multiple _isMultiInstanciated_2 = _name_3.getIsMultiInstanciated();
          EList<String> _maximum = _isMultiInstanciated_2.getMaximum();
          String _get = _maximum.get(0);
          String _plus = ((("Cardinality of" + nameOfVariable) + "must be in [1,") + _get);
          String _plus_1 = (_plus + "]");
          EReference _variableName_Name_2 = StateConstraintTransitionPackage.eINSTANCE.getVariableName_Name();
          this.error(_plus_1, variableName, _variableName_Name_2);
        }
      }
    }
  }
}
