/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.stateconstrainttransition.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.stateconstrainttransition.services.StateConstraintTransitionGrammarAccess;

@SuppressWarnings("all")
public class StateConstraintTransitionSyntacticSequencer extends AbstractSyntacticSequencer {

	protected StateConstraintTransitionGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Max_Min_MaximumKeyword_0_0_or_MinimumKeyword_0_1;
	protected AbstractElementAlias match_group_most_least_At_leastKeyword_0_0_or_At_mostKeyword_0_1;
	protected AbstractElementAlias match_math_expr_AsteriskKeyword_1_1_1_or_PlusSignKeyword_1_1_0;
	protected AbstractElementAlias match_term_LeftParenthesisKeyword_0_0_a;
	protected AbstractElementAlias match_term_LeftParenthesisKeyword_0_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (StateConstraintTransitionGrammarAccess) access;
		match_Max_Min_MaximumKeyword_0_0_or_MinimumKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getMax_MinAccess().getMaximumKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getMax_MinAccess().getMinimumKeyword_0_1()));
		match_group_most_least_At_leastKeyword_0_0_or_At_mostKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getGroup_most_leastAccess().getAt_leastKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getGroup_most_leastAccess().getAt_mostKeyword_0_1()));
		match_math_expr_AsteriskKeyword_1_1_1_or_PlusSignKeyword_1_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getMath_exprAccess().getAsteriskKeyword_1_1_1()), new TokenAlias(false, false, grammarAccess.getMath_exprAccess().getPlusSignKeyword_1_1_0()));
		match_term_LeftParenthesisKeyword_0_0_a = new TokenAlias(true, true, grammarAccess.getTermAccess().getLeftParenthesisKeyword_0_0());
		match_term_LeftParenthesisKeyword_0_0_p = new TokenAlias(true, false, grammarAccess.getTermAccess().getLeftParenthesisKeyword_0_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Max_Min_MaximumKeyword_0_0_or_MinimumKeyword_0_1.equals(syntax))
				emit_Max_Min_MaximumKeyword_0_0_or_MinimumKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_group_most_least_At_leastKeyword_0_0_or_At_mostKeyword_0_1.equals(syntax))
				emit_group_most_least_At_leastKeyword_0_0_or_At_mostKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_math_expr_AsteriskKeyword_1_1_1_or_PlusSignKeyword_1_1_0.equals(syntax))
				emit_math_expr_AsteriskKeyword_1_1_1_or_PlusSignKeyword_1_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_term_LeftParenthesisKeyword_0_0_a.equals(syntax))
				emit_term_LeftParenthesisKeyword_0_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_term_LeftParenthesisKeyword_0_0_p.equals(syntax))
				emit_term_LeftParenthesisKeyword_0_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'maximum(' | 'minimum('
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '('* (ambiguity) var=VariableName
	 *     (rule start) '('+ (ambiguity) var=VariableName
	 *     (rule start) (ambiguity) var=VariableName
	 */
	protected void emit_Max_Min_MaximumKeyword_0_0_or_MinimumKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'at_least(' | 'at_most('
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '('* (ambiguity) instances=IntValue
	 *     (rule start) '('+ (ambiguity) instances=IntValue
	 *     (rule start) (ambiguity) instances=IntValue
	 */
	protected void emit_group_most_least_At_leastKeyword_0_0_or_At_mostKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '+' | '*'
	 *
	 * This ambiguous syntax occurs at:
	 *     {math_expr.left=} (ambiguity) right=term
	 */
	protected void emit_math_expr_AsteriskKeyword_1_1_1_or_PlusSignKeyword_1_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'all_equal(' var=varEnumeration
	 *     (rule start) (ambiguity) 'not' Constraint=term
	 *     (rule start) (ambiguity) ('at_least(' | 'at_most(') instances=IntValue
	 *     (rule start) (ambiguity) ('maximum(' | 'minimum(') var=VariableName
	 *     (rule start) (ambiguity) value=Constant
	 *     (rule start) (ambiguity) value=VariableName
	 *     (rule start) (ambiguity) value=strings
	 *     (rule start) (ambiguity) {And_expr.left=}
	 *     (rule start) (ambiguity) {Compare_expr.left=}
	 *     (rule start) (ambiguity) {Log_expr.left=}
	 *     (rule start) (ambiguity) {Or_expr.left=}
	 *     (rule start) (ambiguity) {math_expr.left=}
	 */
	protected void emit_term_LeftParenthesisKeyword_0_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'all_equal(' var=varEnumeration
	 *     (rule start) (ambiguity) ('at_least(' | 'at_most(') instances=IntValue
	 *     (rule start) (ambiguity) ('maximum(' | 'minimum(') var=VariableName
	 *     (rule start) (ambiguity) {And_expr.left=}
	 *     (rule start) (ambiguity) {Compare_expr.left=}
	 *     (rule start) (ambiguity) {Log_expr.left=}
	 *     (rule start) (ambiguity) {Or_expr.left=}
	 *     (rule start) (ambiguity) {math_expr.left=}
	 */
	protected void emit_term_LeftParenthesisKeyword_0_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
