/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.stateconstrainttransition.stateConstraintTransition.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.stateconstrainttransition.stateConstraintTransition.Event;
import org.xtext.example.stateconstrainttransition.stateConstraintTransition.EventOccurence;
import org.xtext.example.stateconstrainttransition.stateConstraintTransition.StateConstraintTransitionPackage;
import org.xtext.example.stateconstrainttransition.stateConstraintTransition.StateOccurence;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Event</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.stateconstrainttransition.stateConstraintTransition.impl.EventImpl#getEvOcc <em>Ev Occ</em>}</li>
 *   <li>{@link org.xtext.example.stateconstrainttransition.stateConstraintTransition.impl.EventImpl#getOperator <em>Operator</em>}</li>
 *   <li>{@link org.xtext.example.stateconstrainttransition.stateConstraintTransition.impl.EventImpl#getSttOcc <em>Stt Occ</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EventImpl extends MinimalEObjectImpl.Container implements Event
{
  /**
   * The cached value of the '{@link #getEvOcc() <em>Ev Occ</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEvOcc()
   * @generated
   * @ordered
   */
  protected EventOccurence evOcc;

  /**
   * The default value of the '{@link #getOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected static final String OPERATOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected String operator = OPERATOR_EDEFAULT;

  /**
   * The cached value of the '{@link #getSttOcc() <em>Stt Occ</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSttOcc()
   * @generated
   * @ordered
   */
  protected StateOccurence sttOcc;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EventImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return StateConstraintTransitionPackage.Literals.EVENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EventOccurence getEvOcc()
  {
    return evOcc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEvOcc(EventOccurence newEvOcc, NotificationChain msgs)
  {
    EventOccurence oldEvOcc = evOcc;
    evOcc = newEvOcc;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, StateConstraintTransitionPackage.EVENT__EV_OCC, oldEvOcc, newEvOcc);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEvOcc(EventOccurence newEvOcc)
  {
    if (newEvOcc != evOcc)
    {
      NotificationChain msgs = null;
      if (evOcc != null)
        msgs = ((InternalEObject)evOcc).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - StateConstraintTransitionPackage.EVENT__EV_OCC, null, msgs);
      if (newEvOcc != null)
        msgs = ((InternalEObject)newEvOcc).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - StateConstraintTransitionPackage.EVENT__EV_OCC, null, msgs);
      msgs = basicSetEvOcc(newEvOcc, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StateConstraintTransitionPackage.EVENT__EV_OCC, newEvOcc, newEvOcc));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getOperator()
  {
    return operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOperator(String newOperator)
  {
    String oldOperator = operator;
    operator = newOperator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StateConstraintTransitionPackage.EVENT__OPERATOR, oldOperator, operator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StateOccurence getSttOcc()
  {
    return sttOcc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSttOcc(StateOccurence newSttOcc, NotificationChain msgs)
  {
    StateOccurence oldSttOcc = sttOcc;
    sttOcc = newSttOcc;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, StateConstraintTransitionPackage.EVENT__STT_OCC, oldSttOcc, newSttOcc);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSttOcc(StateOccurence newSttOcc)
  {
    if (newSttOcc != sttOcc)
    {
      NotificationChain msgs = null;
      if (sttOcc != null)
        msgs = ((InternalEObject)sttOcc).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - StateConstraintTransitionPackage.EVENT__STT_OCC, null, msgs);
      if (newSttOcc != null)
        msgs = ((InternalEObject)newSttOcc).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - StateConstraintTransitionPackage.EVENT__STT_OCC, null, msgs);
      msgs = basicSetSttOcc(newSttOcc, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StateConstraintTransitionPackage.EVENT__STT_OCC, newSttOcc, newSttOcc));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case StateConstraintTransitionPackage.EVENT__EV_OCC:
        return basicSetEvOcc(null, msgs);
      case StateConstraintTransitionPackage.EVENT__STT_OCC:
        return basicSetSttOcc(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case StateConstraintTransitionPackage.EVENT__EV_OCC:
        return getEvOcc();
      case StateConstraintTransitionPackage.EVENT__OPERATOR:
        return getOperator();
      case StateConstraintTransitionPackage.EVENT__STT_OCC:
        return getSttOcc();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case StateConstraintTransitionPackage.EVENT__EV_OCC:
        setEvOcc((EventOccurence)newValue);
        return;
      case StateConstraintTransitionPackage.EVENT__OPERATOR:
        setOperator((String)newValue);
        return;
      case StateConstraintTransitionPackage.EVENT__STT_OCC:
        setSttOcc((StateOccurence)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case StateConstraintTransitionPackage.EVENT__EV_OCC:
        setEvOcc((EventOccurence)null);
        return;
      case StateConstraintTransitionPackage.EVENT__OPERATOR:
        setOperator(OPERATOR_EDEFAULT);
        return;
      case StateConstraintTransitionPackage.EVENT__STT_OCC:
        setSttOcc((StateOccurence)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case StateConstraintTransitionPackage.EVENT__EV_OCC:
        return evOcc != null;
      case StateConstraintTransitionPackage.EVENT__OPERATOR:
        return OPERATOR_EDEFAULT == null ? operator != null : !OPERATOR_EDEFAULT.equals(operator);
      case StateConstraintTransitionPackage.EVENT__STT_OCC:
        return sttOcc != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (operator: ");
    result.append(operator);
    result.append(')');
    return result.toString();
  }

} //EventImpl
