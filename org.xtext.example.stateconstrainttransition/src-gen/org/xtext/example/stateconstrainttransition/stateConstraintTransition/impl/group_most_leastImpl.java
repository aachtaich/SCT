/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.stateconstrainttransition.stateConstraintTransition.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.example.stateconstrainttransition.stateConstraintTransition.Constraint;
import org.xtext.example.stateconstrainttransition.stateConstraintTransition.StateConstraintTransitionPackage;
import org.xtext.example.stateconstrainttransition.stateConstraintTransition.group_most_least;
import org.xtext.example.stateconstrainttransition.stateConstraintTransition.varEnumeration;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>group most least</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.stateconstrainttransition.stateConstraintTransition.impl.group_most_leastImpl#getInstances <em>Instances</em>}</li>
 *   <li>{@link org.xtext.example.stateconstrainttransition.stateConstraintTransition.impl.group_most_leastImpl#getVariables <em>Variables</em>}</li>
 *   <li>{@link org.xtext.example.stateconstrainttransition.stateConstraintTransition.impl.group_most_leastImpl#getAtomic <em>Atomic</em>}</li>
 * </ul>
 *
 * @generated
 */
public class group_most_leastImpl extends GlobalConstraintImpl implements group_most_least
{
  /**
   * The default value of the '{@link #getInstances() <em>Instances</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInstances()
   * @generated
   * @ordered
   */
  protected static final String INSTANCES_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getInstances() <em>Instances</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInstances()
   * @generated
   * @ordered
   */
  protected String instances = INSTANCES_EDEFAULT;

  /**
   * The cached value of the '{@link #getVariables() <em>Variables</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariables()
   * @generated
   * @ordered
   */
  protected varEnumeration variables;

  /**
   * The cached value of the '{@link #getAtomic() <em>Atomic</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAtomic()
   * @generated
   * @ordered
   */
  protected Constraint atomic;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected group_most_leastImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return StateConstraintTransitionPackage.Literals.GROUP_MOST_LEAST;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getInstances()
  {
    return instances;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setInstances(String newInstances)
  {
    String oldInstances = instances;
    instances = newInstances;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StateConstraintTransitionPackage.GROUP_MOST_LEAST__INSTANCES, oldInstances, instances));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public varEnumeration getVariables()
  {
    return variables;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVariables(varEnumeration newVariables, NotificationChain msgs)
  {
    varEnumeration oldVariables = variables;
    variables = newVariables;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, StateConstraintTransitionPackage.GROUP_MOST_LEAST__VARIABLES, oldVariables, newVariables);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setVariables(varEnumeration newVariables)
  {
    if (newVariables != variables)
    {
      NotificationChain msgs = null;
      if (variables != null)
        msgs = ((InternalEObject)variables).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - StateConstraintTransitionPackage.GROUP_MOST_LEAST__VARIABLES, null, msgs);
      if (newVariables != null)
        msgs = ((InternalEObject)newVariables).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - StateConstraintTransitionPackage.GROUP_MOST_LEAST__VARIABLES, null, msgs);
      msgs = basicSetVariables(newVariables, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StateConstraintTransitionPackage.GROUP_MOST_LEAST__VARIABLES, newVariables, newVariables));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Constraint getAtomic()
  {
    return atomic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAtomic(Constraint newAtomic, NotificationChain msgs)
  {
    Constraint oldAtomic = atomic;
    atomic = newAtomic;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, StateConstraintTransitionPackage.GROUP_MOST_LEAST__ATOMIC, oldAtomic, newAtomic);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAtomic(Constraint newAtomic)
  {
    if (newAtomic != atomic)
    {
      NotificationChain msgs = null;
      if (atomic != null)
        msgs = ((InternalEObject)atomic).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - StateConstraintTransitionPackage.GROUP_MOST_LEAST__ATOMIC, null, msgs);
      if (newAtomic != null)
        msgs = ((InternalEObject)newAtomic).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - StateConstraintTransitionPackage.GROUP_MOST_LEAST__ATOMIC, null, msgs);
      msgs = basicSetAtomic(newAtomic, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, StateConstraintTransitionPackage.GROUP_MOST_LEAST__ATOMIC, newAtomic, newAtomic));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case StateConstraintTransitionPackage.GROUP_MOST_LEAST__VARIABLES:
        return basicSetVariables(null, msgs);
      case StateConstraintTransitionPackage.GROUP_MOST_LEAST__ATOMIC:
        return basicSetAtomic(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case StateConstraintTransitionPackage.GROUP_MOST_LEAST__INSTANCES:
        return getInstances();
      case StateConstraintTransitionPackage.GROUP_MOST_LEAST__VARIABLES:
        return getVariables();
      case StateConstraintTransitionPackage.GROUP_MOST_LEAST__ATOMIC:
        return getAtomic();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case StateConstraintTransitionPackage.GROUP_MOST_LEAST__INSTANCES:
        setInstances((String)newValue);
        return;
      case StateConstraintTransitionPackage.GROUP_MOST_LEAST__VARIABLES:
        setVariables((varEnumeration)newValue);
        return;
      case StateConstraintTransitionPackage.GROUP_MOST_LEAST__ATOMIC:
        setAtomic((Constraint)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case StateConstraintTransitionPackage.GROUP_MOST_LEAST__INSTANCES:
        setInstances(INSTANCES_EDEFAULT);
        return;
      case StateConstraintTransitionPackage.GROUP_MOST_LEAST__VARIABLES:
        setVariables((varEnumeration)null);
        return;
      case StateConstraintTransitionPackage.GROUP_MOST_LEAST__ATOMIC:
        setAtomic((Constraint)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case StateConstraintTransitionPackage.GROUP_MOST_LEAST__INSTANCES:
        return INSTANCES_EDEFAULT == null ? instances != null : !INSTANCES_EDEFAULT.equals(instances);
      case StateConstraintTransitionPackage.GROUP_MOST_LEAST__VARIABLES:
        return variables != null;
      case StateConstraintTransitionPackage.GROUP_MOST_LEAST__ATOMIC:
        return atomic != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (instances: ");
    result.append(instances);
    result.append(')');
    return result.toString();
  }

} //group_most_leastImpl
