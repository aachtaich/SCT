/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.stateconstrainttransition.stateConstraintTransition.impl;

import java.util.Collection;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

import org.xtext.example.stateconstrainttransition.stateConstraintTransition.StateConstraintTransitionPackage;
import org.xtext.example.stateconstrainttransition.stateConstraintTransition.multiple;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>multiple</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.stateconstrainttransition.stateConstraintTransition.impl.multipleImpl#getMinimum <em>Minimum</em>}</li>
 *   <li>{@link org.xtext.example.stateconstrainttransition.stateConstraintTransition.impl.multipleImpl#getMaximum <em>Maximum</em>}</li>
 * </ul>
 *
 * @generated
 */
public class multipleImpl extends MinimalEObjectImpl.Container implements multiple
{
  /**
   * The cached value of the '{@link #getMinimum() <em>Minimum</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMinimum()
   * @generated
   * @ordered
   */
  protected EList<String> minimum;

  /**
   * The cached value of the '{@link #getMaximum() <em>Maximum</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMaximum()
   * @generated
   * @ordered
   */
  protected EList<String> maximum;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected multipleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return StateConstraintTransitionPackage.Literals.MULTIPLE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getMinimum()
  {
    if (minimum == null)
    {
      minimum = new EDataTypeEList<String>(String.class, this, StateConstraintTransitionPackage.MULTIPLE__MINIMUM);
    }
    return minimum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getMaximum()
  {
    if (maximum == null)
    {
      maximum = new EDataTypeEList<String>(String.class, this, StateConstraintTransitionPackage.MULTIPLE__MAXIMUM);
    }
    return maximum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case StateConstraintTransitionPackage.MULTIPLE__MINIMUM:
        return getMinimum();
      case StateConstraintTransitionPackage.MULTIPLE__MAXIMUM:
        return getMaximum();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case StateConstraintTransitionPackage.MULTIPLE__MINIMUM:
        getMinimum().clear();
        getMinimum().addAll((Collection<? extends String>)newValue);
        return;
      case StateConstraintTransitionPackage.MULTIPLE__MAXIMUM:
        getMaximum().clear();
        getMaximum().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case StateConstraintTransitionPackage.MULTIPLE__MINIMUM:
        getMinimum().clear();
        return;
      case StateConstraintTransitionPackage.MULTIPLE__MAXIMUM:
        getMaximum().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case StateConstraintTransitionPackage.MULTIPLE__MINIMUM:
        return minimum != null && !minimum.isEmpty();
      case StateConstraintTransitionPackage.MULTIPLE__MAXIMUM:
        return maximum != null && !maximum.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (minimum: ");
    result.append(minimum);
    result.append(", maximum: ");
    result.append(maximum);
    result.append(')');
    return result.toString();
  }

} //multipleImpl
