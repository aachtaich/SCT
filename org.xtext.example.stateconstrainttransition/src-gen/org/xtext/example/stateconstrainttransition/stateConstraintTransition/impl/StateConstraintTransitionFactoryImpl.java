/**
 * generated by Xtext 2.10.0
 */
package org.xtext.example.stateconstrainttransition.stateConstraintTransition.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.stateconstrainttransition.stateConstraintTransition.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class StateConstraintTransitionFactoryImpl extends EFactoryImpl implements StateConstraintTransitionFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static StateConstraintTransitionFactory init()
  {
    try
    {
      StateConstraintTransitionFactory theStateConstraintTransitionFactory = (StateConstraintTransitionFactory)EPackage.Registry.INSTANCE.getEFactory(StateConstraintTransitionPackage.eNS_URI);
      if (theStateConstraintTransitionFactory != null)
      {
        return theStateConstraintTransitionFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new StateConstraintTransitionFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StateConstraintTransitionFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case StateConstraintTransitionPackage.MODEL: return createModel();
      case StateConstraintTransitionPackage.VARIABLE: return createVariable();
      case StateConstraintTransitionPackage.MULTIPLE: return createmultiple();
      case StateConstraintTransitionPackage.STATE: return createState();
      case StateConstraintTransitionPackage.TRANSITION: return createTransition();
      case StateConstraintTransitionPackage.START_TRANSITION: return createStartTransition();
      case StateConstraintTransitionPackage.END_TRANSITION: return createEndTransition();
      case StateConstraintTransitionPackage.FULL_TRANSITION: return createFullTransition();
      case StateConstraintTransitionPackage.EVENT: return createEvent();
      case StateConstraintTransitionPackage.EVENT_OCCURENCE: return createEventOccurence();
      case StateConstraintTransitionPackage.STATE_OCCURENCE: return createStateOccurence();
      case StateConstraintTransitionPackage.STATE_CONSTRAINT: return createStateConstraint();
      case StateConstraintTransitionPackage.COMPOSITE_STATE: return createCompositeState();
      case StateConstraintTransitionPackage.CONCERN_LEVEL: return createConcernLevel();
      case StateConstraintTransitionPackage.SIMPLE_CONSTRAINT_STATE: return createSimpleConstraintState();
      case StateConstraintTransitionPackage.CONSTRAINT: return createConstraint();
      case StateConstraintTransitionPackage.VARIABLE_NAME: return createVariableName();
      case StateConstraintTransitionPackage.GLOBAL_CONSTRAINT: return createGlobalConstraint();
      case StateConstraintTransitionPackage.GROUP_MOST_LEAST: return creategroup_most_least();
      case StateConstraintTransitionPackage.GROUP_VALUATION: return creategroup_valuation();
      case StateConstraintTransitionPackage.MAX_MIN: return createMax_Min();
      case StateConstraintTransitionPackage.VAR_ENUMERATION: return createvarEnumeration();
      case StateConstraintTransitionPackage.OR_STATE: return createOr_state();
      case StateConstraintTransitionPackage.AND_STATE: return createAnd_state();
      case StateConstraintTransitionPackage.STATE_NAME_REF: return createstateNameRef();
      case StateConstraintTransitionPackage.LOG_EXPR: return createLog_expr();
      case StateConstraintTransitionPackage.OR_EXPR: return createOr_expr();
      case StateConstraintTransitionPackage.AND_EXPR: return createAnd_expr();
      case StateConstraintTransitionPackage.COMPARE_EXPR: return createCompare_expr();
      case StateConstraintTransitionPackage.MATH_EXPR: return createmath_expr();
      case StateConstraintTransitionPackage.NOT: return createNot();
      case StateConstraintTransitionPackage.CONSTANT: return createConstant();
      case StateConstraintTransitionPackage.VAR: return createVar();
      case StateConstraintTransitionPackage.STRING: return createstring();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public multiple createmultiple()
  {
    multipleImpl multiple = new multipleImpl();
    return multiple;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public State createState()
  {
    StateImpl state = new StateImpl();
    return state;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Transition createTransition()
  {
    TransitionImpl transition = new TransitionImpl();
    return transition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StartTransition createStartTransition()
  {
    StartTransitionImpl startTransition = new StartTransitionImpl();
    return startTransition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EndTransition createEndTransition()
  {
    EndTransitionImpl endTransition = new EndTransitionImpl();
    return endTransition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FullTransition createFullTransition()
  {
    FullTransitionImpl fullTransition = new FullTransitionImpl();
    return fullTransition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Event createEvent()
  {
    EventImpl event = new EventImpl();
    return event;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EventOccurence createEventOccurence()
  {
    EventOccurenceImpl eventOccurence = new EventOccurenceImpl();
    return eventOccurence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StateOccurence createStateOccurence()
  {
    StateOccurenceImpl stateOccurence = new StateOccurenceImpl();
    return stateOccurence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StateConstraint createStateConstraint()
  {
    StateConstraintImpl stateConstraint = new StateConstraintImpl();
    return stateConstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CompositeState createCompositeState()
  {
    CompositeStateImpl compositeState = new CompositeStateImpl();
    return compositeState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConcernLevel createConcernLevel()
  {
    ConcernLevelImpl concernLevel = new ConcernLevelImpl();
    return concernLevel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpleConstraintState createSimpleConstraintState()
  {
    SimpleConstraintStateImpl simpleConstraintState = new SimpleConstraintStateImpl();
    return simpleConstraintState;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Constraint createConstraint()
  {
    ConstraintImpl constraint = new ConstraintImpl();
    return constraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VariableName createVariableName()
  {
    VariableNameImpl variableName = new VariableNameImpl();
    return variableName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GlobalConstraint createGlobalConstraint()
  {
    GlobalConstraintImpl globalConstraint = new GlobalConstraintImpl();
    return globalConstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public group_most_least creategroup_most_least()
  {
    group_most_leastImpl group_most_least = new group_most_leastImpl();
    return group_most_least;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public group_valuation creategroup_valuation()
  {
    group_valuationImpl group_valuation = new group_valuationImpl();
    return group_valuation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Max_Min createMax_Min()
  {
    Max_MinImpl max_Min = new Max_MinImpl();
    return max_Min;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public varEnumeration createvarEnumeration()
  {
    varEnumerationImpl varEnumeration = new varEnumerationImpl();
    return varEnumeration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Or_state createOr_state()
  {
    Or_stateImpl or_state = new Or_stateImpl();
    return or_state;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public And_state createAnd_state()
  {
    And_stateImpl and_state = new And_stateImpl();
    return and_state;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public stateNameRef createstateNameRef()
  {
    stateNameRefImpl stateNameRef = new stateNameRefImpl();
    return stateNameRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Log_expr createLog_expr()
  {
    Log_exprImpl log_expr = new Log_exprImpl();
    return log_expr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Or_expr createOr_expr()
  {
    Or_exprImpl or_expr = new Or_exprImpl();
    return or_expr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public And_expr createAnd_expr()
  {
    And_exprImpl and_expr = new And_exprImpl();
    return and_expr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Compare_expr createCompare_expr()
  {
    Compare_exprImpl compare_expr = new Compare_exprImpl();
    return compare_expr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public math_expr createmath_expr()
  {
    math_exprImpl math_expr = new math_exprImpl();
    return math_expr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Not createNot()
  {
    NotImpl not = new NotImpl();
    return not;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Constant createConstant()
  {
    ConstantImpl constant = new ConstantImpl();
    return constant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Var createVar()
  {
    VarImpl var = new VarImpl();
    return var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public string createstring()
  {
    stringImpl string = new stringImpl();
    return string;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StateConstraintTransitionPackage getStateConstraintTransitionPackage()
  {
    return (StateConstraintTransitionPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static StateConstraintTransitionPackage getPackage()
  {
    return StateConstraintTransitionPackage.eINSTANCE;
  }

} //StateConstraintTransitionFactoryImpl
