/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.stateconstrainttransition.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class StateConstraintTransitionGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateMachineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableVariableParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Assignment cFlexConstraintsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFlexConstraintsConstraintParserRuleCall_3_0 = (RuleCall)cFlexConstraintsAssignment_3.eContents().get(0);
		private final Assignment cStateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStateStateParserRuleCall_4_0 = (RuleCall)cStateAssignment_4.eContents().get(0);
		private final Assignment cTransitionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTransitionTransitionParserRuleCall_5_0 = (RuleCall)cTransitionAssignment_5.eContents().get(0);
		
		//Model:
		//	"stateMachine" name=ID
		//	//Variables cretaed for this model, or retrieved from other models
		//	variable+=Variable+
		//	//the constraints generated from external models (they should be flexible)
		//	flexConstraints+=Constraint*
		//	//states/transitions that defined the dynamic behavior of the SPL
		//	state+=State+
		//	transition+=Transition+;
		@Override public ParserRule getRule() { return rule; }
		
		//"stateMachine" name=ID //Variables cretaed for this model, or retrieved from other models
		//variable+=Variable+ //the constraints generated from external models (they should be flexible)
		//flexConstraints+=Constraint* //states/transitions that defined the dynamic behavior of the SPL
		//state+=State+ transition+=Transition+
		public Group getGroup() { return cGroup; }
		
		//"stateMachine"
		public Keyword getStateMachineKeyword_0() { return cStateMachineKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		////Variables cretaed for this model, or retrieved from other models
		//variable+=Variable+
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_2_0() { return cVariableVariableParserRuleCall_2_0; }
		
		////the constraints generated from external models (they should be flexible)
		//flexConstraints+=Constraint*
		public Assignment getFlexConstraintsAssignment_3() { return cFlexConstraintsAssignment_3; }
		
		//Constraint
		public RuleCall getFlexConstraintsConstraintParserRuleCall_3_0() { return cFlexConstraintsConstraintParserRuleCall_3_0; }
		
		////states/transitions that defined the dynamic behavior of the SPL
		//state+=State+
		public Assignment getStateAssignment_4() { return cStateAssignment_4; }
		
		//State
		public RuleCall getStateStateParserRuleCall_4_0() { return cStateStateParserRuleCall_4_0; }
		
		//transition+=Transition+
		public Assignment getTransitionAssignment_5() { return cTransitionAssignment_5; }
		
		//Transition
		public RuleCall getTransitionTransitionParserRuleCall_5_0() { return cTransitionTransitionParserRuleCall_5_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarTypeVarTypeParserRuleCall_0_0 = (RuleCall)cVarTypeAssignment_0.eContents().get(0);
		private final Assignment cContextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cContextParamKeyword_1_0 = (Keyword)cContextAssignment_1.eContents().get(0);
		private final Assignment cInEnumerationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cInEnumerationEnumKeyword_2_0 = (Keyword)cInEnumerationAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cIsMultiInstanciatedAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIsMultiInstanciatedMultipleParserRuleCall_4_0 = (RuleCall)cIsMultiInstanciatedAssignment_4.eContents().get(0);
		private final Assignment cDomainAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDomainDomainParserRuleCall_5_0 = (RuleCall)cDomainAssignment_5.eContents().get(0);
		private final Assignment cValuesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cValuesEnumerationParserRuleCall_6_0 = (RuleCall)cValuesAssignment_6.eContents().get(0);
		
		/// *--------- Variable declaration ---------* / //The variable needs more tweeking 
		//Variable:
		//	varType=VarType context="Param"? inEnumeration="Enum"? name=ID isMultiInstanciated=multiple? domain=Domain?
		//	values+=Enumeration?;
		@Override public ParserRule getRule() { return rule; }
		
		//varType=VarType context="Param"? inEnumeration="Enum"? name=ID isMultiInstanciated=multiple? domain=Domain?
		//values+=Enumeration?
		public Group getGroup() { return cGroup; }
		
		//varType=VarType
		public Assignment getVarTypeAssignment_0() { return cVarTypeAssignment_0; }
		
		//VarType
		public RuleCall getVarTypeVarTypeParserRuleCall_0_0() { return cVarTypeVarTypeParserRuleCall_0_0; }
		
		//context="Param"?
		public Assignment getContextAssignment_1() { return cContextAssignment_1; }
		
		//"Param"
		public Keyword getContextParamKeyword_1_0() { return cContextParamKeyword_1_0; }
		
		//inEnumeration="Enum"?
		public Assignment getInEnumerationAssignment_2() { return cInEnumerationAssignment_2; }
		
		//"Enum"
		public Keyword getInEnumerationEnumKeyword_2_0() { return cInEnumerationEnumKeyword_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//isMultiInstanciated=multiple?
		public Assignment getIsMultiInstanciatedAssignment_4() { return cIsMultiInstanciatedAssignment_4; }
		
		//multiple
		public RuleCall getIsMultiInstanciatedMultipleParserRuleCall_4_0() { return cIsMultiInstanciatedMultipleParserRuleCall_4_0; }
		
		//domain=Domain?
		public Assignment getDomainAssignment_5() { return cDomainAssignment_5; }
		
		//Domain
		public RuleCall getDomainDomainParserRuleCall_5_0() { return cDomainDomainParserRuleCall_5_0; }
		
		//values+=Enumeration?
		public Assignment getValuesAssignment_6() { return cValuesAssignment_6; }
		
		//Enumeration
		public RuleCall getValuesEnumerationParserRuleCall_6_0() { return cValuesEnumerationParserRuleCall_6_0; }
	}
	public class VarTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.VarType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIntegerKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFloatKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cBooleanKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//VarType:
		//	"String" | "Integer" | "Float" | "Boolean";
		@Override public ParserRule getRule() { return rule; }
		
		//"String" | "Integer" | "Float" | "Boolean"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"String"
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }
		
		//"Integer"
		public Keyword getIntegerKeyword_1() { return cIntegerKeyword_1; }
		
		//"Float"
		public Keyword getFloatKeyword_2() { return cFloatKeyword_2; }
		
		//"Boolean"
		public Keyword getBooleanKeyword_3() { return cBooleanKeyword_3; }
	}
	public class MultipleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.multiple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMinimumAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMinimumMinParserRuleCall_1_0 = (RuleCall)cMinimumAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMaximumAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMaximumMaxParserRuleCall_3_0 = (RuleCall)cMaximumAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//multiple:
		//	"[" minimum+=min "," maximum+=max "]";
		@Override public ParserRule getRule() { return rule; }
		
		//"[" minimum+=min "," maximum+=max "]"
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//minimum+=min
		public Assignment getMinimumAssignment_1() { return cMinimumAssignment_1; }
		
		//min
		public RuleCall getMinimumMinParserRuleCall_1_0() { return cMinimumMinParserRuleCall_1_0; }
		
		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//maximum+=max
		public Assignment getMaximumAssignment_3() { return cMaximumAssignment_3; }
		
		//max
		public RuleCall getMaximumMaxParserRuleCall_3_0() { return cMaximumMaxParserRuleCall_3_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class DomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.Domain");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFloatDomainParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntDomainParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Domain:
		//	FloatDomain | IntDomain;
		@Override public ParserRule getRule() { return rule; }
		
		//FloatDomain | IntDomain
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FloatDomain
		public RuleCall getFloatDomainParserRuleCall_0() { return cFloatDomainParserRuleCall_0; }
		
		//IntDomain
		public RuleCall getIntDomainParserRuleCall_1() { return cIntDomainParserRuleCall_1; }
	}
	public class FloatDomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.FloatDomain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIntValueParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cIntValueParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cFullStopFullStopKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cIntValueParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cFullStopKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cIntValueParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cRightSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//FloatDomain:
		//	"[" IntValue '.' IntValue ".." IntValue '.' IntValue "]";
		@Override public ParserRule getRule() { return rule; }
		
		//"[" IntValue '.' IntValue ".." IntValue '.' IntValue "]"
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//IntValue
		public RuleCall getIntValueParserRuleCall_1() { return cIntValueParserRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//IntValue
		public RuleCall getIntValueParserRuleCall_3() { return cIntValueParserRuleCall_3; }
		
		//".."
		public Keyword getFullStopFullStopKeyword_4() { return cFullStopFullStopKeyword_4; }
		
		//IntValue
		public RuleCall getIntValueParserRuleCall_5() { return cIntValueParserRuleCall_5; }
		
		//'.'
		public Keyword getFullStopKeyword_6() { return cFullStopKeyword_6; }
		
		//IntValue
		public RuleCall getIntValueParserRuleCall_7() { return cIntValueParserRuleCall_7; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_8() { return cRightSquareBracketKeyword_8; }
	}
	public class IntDomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.IntDomain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIntValueParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cIntValueParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//IntDomain:
		//	"[" IntValue ".." IntValue "]";
		@Override public ParserRule getRule() { return rule; }
		
		//"[" IntValue ".." IntValue "]"
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//IntValue
		public RuleCall getIntValueParserRuleCall_1() { return cIntValueParserRuleCall_1; }
		
		//".."
		public Keyword getFullStopFullStopKeyword_2() { return cFullStopFullStopKeyword_2; }
		
		//IntValue
		public RuleCall getIntValueParserRuleCall_3() { return cIntValueParserRuleCall_3; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class EnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.Enumeration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntEnumerationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringEnumerationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Enumeration:
		//	IntEnumeration | StringEnumeration;
		@Override public ParserRule getRule() { return rule; }
		
		//IntEnumeration | StringEnumeration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntEnumeration
		public RuleCall getIntEnumerationParserRuleCall_0() { return cIntEnumerationParserRuleCall_0; }
		
		//StringEnumeration
		public RuleCall getStringEnumerationParserRuleCall_1() { return cStringEnumerationParserRuleCall_1; }
	}
	public class IntEnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.IntEnumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIntValueParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cIntValueParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//IntEnumeration:
		//	'{' IntValue (',' IntValue)+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' IntValue (',' IntValue)+ '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//IntValue
		public RuleCall getIntValueParserRuleCall_1() { return cIntValueParserRuleCall_1; }
		
		//(',' IntValue)+
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//IntValue
		public RuleCall getIntValueParserRuleCall_2_1() { return cIntValueParserRuleCall_2_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class StringEnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.StringEnumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cStringsParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cStringsParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StringEnumeration:
		//	'{' strings (',' strings)+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' strings (',' strings)+ '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//strings
		public RuleCall getStringsParserRuleCall_1() { return cStringsParserRuleCall_1; }
		
		//(',' strings)+
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//strings
		public RuleCall getStringsParserRuleCall_2_1() { return cStringsParserRuleCall_2_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class MaxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.max");
		private final RuleCall cIntValueParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//max:
		//	IntValue;
		@Override public ParserRule getRule() { return rule; }
		
		//IntValue
		public RuleCall getIntValueParserRuleCall() { return cIntValueParserRuleCall; }
	}
	public class MinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.min");
		private final RuleCall cIntValueParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//min:
		//	IntValue;
		@Override public ParserRule getRule() { return rule; }
		
		//IntValue
		public RuleCall getIntValueParserRuleCall() { return cIntValueParserRuleCall; }
	}
	public class StringsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.strings");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//strings:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.State");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleConstraintStateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompositeStateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// *--------- The Statemachine ---------* / State:
		//	SimpleConstraintState | CompositeState;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleConstraintState | CompositeState
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleConstraintState
		public RuleCall getSimpleConstraintStateParserRuleCall_0() { return cSimpleConstraintStateParserRuleCall_0; }
		
		//CompositeState
		public RuleCall getCompositeStateParserRuleCall_1() { return cCompositeStateParserRuleCall_1; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.Transition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStartTransitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEndTransitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFullTransitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Transition:
		//	StartTransition | EndTransition | FullTransition;
		@Override public ParserRule getRule() { return rule; }
		
		//StartTransition | EndTransition | FullTransition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StartTransition
		public RuleCall getStartTransitionParserRuleCall_0() { return cStartTransitionParserRuleCall_0; }
		
		//EndTransition
		public RuleCall getEndTransitionParserRuleCall_1() { return cEndTransitionParserRuleCall_1; }
		
		//FullTransition
		public RuleCall getFullTransitionParserRuleCall_2() { return cFullTransitionParserRuleCall_2; }
	}
	public class StartTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.StartTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTransitionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetStateStateCrossReference_3_0 = (CrossReference)cTargetStateAssignment_3.eContents().get(0);
		private final RuleCall cTargetStateStateFQNParserRuleCall_3_0_1 = (RuleCall)cTargetStateStateCrossReference_3_0.eContents().get(1);
		
		//StartTransition:
		//	"Start" "transition" "to" targetState=[State|FQN];
		@Override public ParserRule getRule() { return rule; }
		
		//"Start" "transition" "to" targetState=[State|FQN]
		public Group getGroup() { return cGroup; }
		
		//"Start"
		public Keyword getStartKeyword_0() { return cStartKeyword_0; }
		
		//"transition"
		public Keyword getTransitionKeyword_1() { return cTransitionKeyword_1; }
		
		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }
		
		//targetState=[State|FQN]
		public Assignment getTargetStateAssignment_3() { return cTargetStateAssignment_3; }
		
		//[State|FQN]
		public CrossReference getTargetStateStateCrossReference_3_0() { return cTargetStateStateCrossReference_3_0; }
		
		//FQN
		public RuleCall getTargetStateStateFQNParserRuleCall_3_0_1() { return cTargetStateStateFQNParserRuleCall_3_0_1; }
	}
	public class EndTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.EndTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTransitionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSourceStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSourceStateStateCrossReference_3_0 = (CrossReference)cSourceStateAssignment_3.eContents().get(0);
		private final RuleCall cSourceStateStateFQNParserRuleCall_3_0_1 = (RuleCall)cSourceStateStateCrossReference_3_0.eContents().get(1);
		
		//EndTransition:
		//	"End" "transition" "from" sourceState=[State|FQN];
		@Override public ParserRule getRule() { return rule; }
		
		//"End" "transition" "from" sourceState=[State|FQN]
		public Group getGroup() { return cGroup; }
		
		//"End"
		public Keyword getEndKeyword_0() { return cEndKeyword_0; }
		
		//"transition"
		public Keyword getTransitionKeyword_1() { return cTransitionKeyword_1; }
		
		//"from"
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//sourceState=[State|FQN]
		public Assignment getSourceStateAssignment_3() { return cSourceStateAssignment_3; }
		
		//[State|FQN]
		public CrossReference getSourceStateStateCrossReference_3_0() { return cSourceStateStateCrossReference_3_0; }
		
		//FQN
		public RuleCall getSourceStateStateFQNParserRuleCall_3_0_1() { return cSourceStateStateFQNParserRuleCall_3_0_1; }
	}
	public class FullTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.FullTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cWhenKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cStateAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cStateStateCrossReference_0_1_0 = (CrossReference)cStateAssignment_0_1.eContents().get(0);
		private final RuleCall cStateStateFQNParserRuleCall_0_1_0_1 = (RuleCall)cStateStateCrossReference_0_1_0.eContents().get(1);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEventAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEventEventParserRuleCall_2_0 = (RuleCall)cEventAssignment_2.eContents().get(0);
		private final Keyword cTransitionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cFromKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSourceStateAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cSourceStateStateCrossReference_5_0 = (CrossReference)cSourceStateAssignment_5.eContents().get(0);
		private final RuleCall cSourceStateStateFQNParserRuleCall_5_0_1 = (RuleCall)cSourceStateStateCrossReference_5_0.eContents().get(1);
		private final Keyword cToKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTargetStateAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cTargetStateStateCrossReference_7_0 = (CrossReference)cTargetStateAssignment_7.eContents().get(0);
		private final RuleCall cTargetStateStateFQNParserRuleCall_7_0_1 = (RuleCall)cTargetStateStateCrossReference_7_0.eContents().get(1);
		
		//FullTransition:
		//	("When" state=[State|FQN])? "if" event=Event "transition" "from" sourceState=[State|FQN] "to" targetState=[State|FQN];
		@Override public ParserRule getRule() { return rule; }
		
		//("When" state=[State|FQN])? "if" event=Event "transition" "from" sourceState=[State|FQN] "to" targetState=[State|FQN]
		public Group getGroup() { return cGroup; }
		
		//("When" state=[State|FQN])?
		public Group getGroup_0() { return cGroup_0; }
		
		//"When"
		public Keyword getWhenKeyword_0_0() { return cWhenKeyword_0_0; }
		
		//state=[State|FQN]
		public Assignment getStateAssignment_0_1() { return cStateAssignment_0_1; }
		
		//[State|FQN]
		public CrossReference getStateStateCrossReference_0_1_0() { return cStateStateCrossReference_0_1_0; }
		
		//FQN
		public RuleCall getStateStateFQNParserRuleCall_0_1_0_1() { return cStateStateFQNParserRuleCall_0_1_0_1; }
		
		//"if"
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//event=Event
		public Assignment getEventAssignment_2() { return cEventAssignment_2; }
		
		//Event
		public RuleCall getEventEventParserRuleCall_2_0() { return cEventEventParserRuleCall_2_0; }
		
		//"transition"
		public Keyword getTransitionKeyword_3() { return cTransitionKeyword_3; }
		
		//"from"
		public Keyword getFromKeyword_4() { return cFromKeyword_4; }
		
		//sourceState=[State|FQN]
		public Assignment getSourceStateAssignment_5() { return cSourceStateAssignment_5; }
		
		//[State|FQN]
		public CrossReference getSourceStateStateCrossReference_5_0() { return cSourceStateStateCrossReference_5_0; }
		
		//FQN
		public RuleCall getSourceStateStateFQNParserRuleCall_5_0_1() { return cSourceStateStateFQNParserRuleCall_5_0_1; }
		
		//"to"
		public Keyword getToKeyword_6() { return cToKeyword_6; }
		
		//targetState=[State|FQN]
		public Assignment getTargetStateAssignment_7() { return cTargetStateAssignment_7; }
		
		//[State|FQN]
		public CrossReference getTargetStateStateCrossReference_7_0() { return cTargetStateStateCrossReference_7_0; }
		
		//FQN
		public RuleCall getTargetStateStateFQNParserRuleCall_7_0_1() { return cTargetStateStateFQNParserRuleCall_7_0_1; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cEvOccAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEvOccEventOccurenceParserRuleCall_1_0 = (RuleCall)cEvOccAssignment_1.eContents().get(0);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cOperatorAlternatives_2_0 = (Alternatives)cOperatorAssignment_2.eContents().get(0);
		private final Keyword cOperatorReverseSolidusSolidusKeyword_2_0_0 = (Keyword)cOperatorAlternatives_2_0.eContents().get(0);
		private final Keyword cOperatorSolidusReverseSolidusKeyword_2_0_1 = (Keyword)cOperatorAlternatives_2_0.eContents().get(1);
		private final Assignment cSttOccAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSttOccStateOccurenceParserRuleCall_3_0 = (RuleCall)cSttOccAssignment_3.eContents().get(0);
		
		//Event:
		//	{Event} evOcc=EventOccurence? operator=("\\/" | "/\\")? sttOcc=StateOccurence?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Event} evOcc=EventOccurence? operator=("\\/" | "/\\")? sttOcc=StateOccurence?
		public Group getGroup() { return cGroup; }
		
		//{Event}
		public Action getEventAction_0() { return cEventAction_0; }
		
		//evOcc=EventOccurence?
		public Assignment getEvOccAssignment_1() { return cEvOccAssignment_1; }
		
		//EventOccurence
		public RuleCall getEvOccEventOccurenceParserRuleCall_1_0() { return cEvOccEventOccurenceParserRuleCall_1_0; }
		
		//operator=("\\/" | "/\\")?
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }
		
		//("\\/" | "/\\")
		public Alternatives getOperatorAlternatives_2_0() { return cOperatorAlternatives_2_0; }
		
		//"\\/"
		public Keyword getOperatorReverseSolidusSolidusKeyword_2_0_0() { return cOperatorReverseSolidusSolidusKeyword_2_0_0; }
		
		//"/\\"
		public Keyword getOperatorSolidusReverseSolidusKeyword_2_0_1() { return cOperatorSolidusReverseSolidusKeyword_2_0_1; }
		
		//sttOcc=StateOccurence?
		public Assignment getSttOccAssignment_3() { return cSttOccAssignment_3; }
		
		//StateOccurence
		public RuleCall getSttOccStateOccurenceParserRuleCall_3_0() { return cSttOccStateOccurenceParserRuleCall_3_0; }
	}
	public class EventOccurenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.EventOccurence");
		private final Assignment cEventExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEventExpressionConstraintParserRuleCall_0 = (RuleCall)cEventExpressionAssignment.eContents().get(0);
		
		//EventOccurence:
		//	eventExpression+=Constraint;
		@Override public ParserRule getRule() { return rule; }
		
		//eventExpression+=Constraint
		public Assignment getEventExpressionAssignment() { return cEventExpressionAssignment; }
		
		//Constraint
		public RuleCall getEventExpressionConstraintParserRuleCall_0() { return cEventExpressionConstraintParserRuleCall_0; }
	}
	public class StateOccurenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.StateOccurence");
		private final Assignment cStateExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStateExpressionStateConstraintParserRuleCall_0 = (RuleCall)cStateExpressionAssignment.eContents().get(0);
		
		//StateOccurence:
		//	stateExpression+=StateConstraint;
		@Override public ParserRule getRule() { return rule; }
		
		//stateExpression+=StateConstraint
		public Assignment getStateExpressionAssignment() { return cStateExpressionAssignment; }
		
		//StateConstraint
		public RuleCall getStateExpressionStateConstraintParserRuleCall_0() { return cStateExpressionStateConstraintParserRuleCall_0; }
	}
	public class StateConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.StateConstraint");
		private final RuleCall cOr_stateParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//StateConstraint:
		//	Or_state;
		@Override public ParserRule getRule() { return rule; }
		
		//Or_state
		public RuleCall getOr_stateParserRuleCall() { return cOr_stateParserRuleCall; }
	}
	public class Or_stateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.Or_state");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAnd_stateParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOr_stateLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cReverseSolidusSolidusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRipeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRipeAnd_stateParserRuleCall_1_2_0 = (RuleCall)cRipeAssignment_1_2.eContents().get(0);
		
		//Or_state StateConstraint:
		//	And_state ({Or_state.left=current} '\\/' ripe=And_state)*
		@Override public ParserRule getRule() { return rule; }
		
		//And_state ({Or_state.left=current} '\\/' ripe=And_state)*
		public Group getGroup() { return cGroup; }
		
		//And_state
		public RuleCall getAnd_stateParserRuleCall_0() { return cAnd_stateParserRuleCall_0; }
		
		//({Or_state.left=current} '\\/' ripe=And_state)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Or_state.left=current}
		public Action getOr_stateLeftAction_1_0() { return cOr_stateLeftAction_1_0; }
		
		//'\\/'
		public Keyword getReverseSolidusSolidusKeyword_1_1() { return cReverseSolidusSolidusKeyword_1_1; }
		
		//ripe=And_state
		public Assignment getRipeAssignment_1_2() { return cRipeAssignment_1_2; }
		
		//And_state
		public RuleCall getRipeAnd_stateParserRuleCall_1_2_0() { return cRipeAnd_stateParserRuleCall_1_2_0; }
	}
	public class And_stateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.And_state");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cStateNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAnd_stateLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSolidusReverseSolidusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRipeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRipeStateNameParserRuleCall_1_2_0 = (RuleCall)cRipeAssignment_1_2.eContents().get(0);
		
		//And_state StateConstraint:
		//	StateName ({And_state.left=current} '/\\' ripe=StateName)*
		@Override public ParserRule getRule() { return rule; }
		
		//StateName ({And_state.left=current} '/\\' ripe=StateName)*
		public Group getGroup() { return cGroup; }
		
		//StateName
		public RuleCall getStateNameParserRuleCall_0() { return cStateNameParserRuleCall_0; }
		
		//({And_state.left=current} '/\\' ripe=StateName)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{And_state.left=current}
		public Action getAnd_stateLeftAction_1_0() { return cAnd_stateLeftAction_1_0; }
		
		//'/\\'
		public Keyword getSolidusReverseSolidusKeyword_1_1() { return cSolidusReverseSolidusKeyword_1_1; }
		
		//ripe=StateName
		public Assignment getRipeAssignment_1_2() { return cRipeAssignment_1_2; }
		
		//StateName
		public RuleCall getRipeStateNameParserRuleCall_1_2_0() { return cRipeStateNameParserRuleCall_1_2_0; }
	}
	public class StateNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.StateName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateNameRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cValueStateCrossReference_1_0 = (CrossReference)cValueAssignment_1.eContents().get(0);
		private final RuleCall cValueStateFQNParserRuleCall_1_0_1 = (RuleCall)cValueStateCrossReference_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDigitOneKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StateName StateConstraint:
		//	{stateNameRef} value=[State|FQN] "=" "1"
		@Override public ParserRule getRule() { return rule; }
		
		//{stateNameRef} value=[State|FQN] "=" "1"
		public Group getGroup() { return cGroup; }
		
		//{stateNameRef}
		public Action getStateNameRefAction_0() { return cStateNameRefAction_0; }
		
		//value=[State|FQN]
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//[State|FQN]
		public CrossReference getValueStateCrossReference_1_0() { return cValueStateCrossReference_1_0; }
		
		//FQN
		public RuleCall getValueStateFQNParserRuleCall_1_0_1() { return cValueStateFQNParserRuleCall_1_0_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//"1"
		public Keyword getDigitOneKeyword_3() { return cDigitOneKeyword_3; }
	}
	public class CompositeStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.CompositeState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypeCompositeStateKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cConcernlevelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConcernlevelConcernLevelParserRuleCall_2_0 = (RuleCall)cConcernlevelAssignment_2.eContents().get(0);
		private final Keyword cEnd_compositeStateKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEndCompositeStateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cEndCompositeStateCompositeStateCrossReference_4_0 = (CrossReference)cEndCompositeStateAssignment_4.eContents().get(0);
		private final RuleCall cEndCompositeStateCompositeStateIDTerminalRuleCall_4_0_1 = (RuleCall)cEndCompositeStateCompositeStateCrossReference_4_0.eContents().get(1);
		
		//CompositeState:
		//	type="compositeState" name=ID
		//	concernlevel+=ConcernLevel+
		//	"end_compositeState" endCompositeState=[CompositeState];
		@Override public ParserRule getRule() { return rule; }
		
		//type="compositeState" name=ID concernlevel+=ConcernLevel+ "end_compositeState" endCompositeState=[CompositeState]
		public Group getGroup() { return cGroup; }
		
		//type="compositeState"
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//"compositeState"
		public Keyword getTypeCompositeStateKeyword_0_0() { return cTypeCompositeStateKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//concernlevel+=ConcernLevel+
		public Assignment getConcernlevelAssignment_2() { return cConcernlevelAssignment_2; }
		
		//ConcernLevel
		public RuleCall getConcernlevelConcernLevelParserRuleCall_2_0() { return cConcernlevelConcernLevelParserRuleCall_2_0; }
		
		//"end_compositeState"
		public Keyword getEnd_compositeStateKeyword_3() { return cEnd_compositeStateKeyword_3; }
		
		//endCompositeState=[CompositeState]
		public Assignment getEndCompositeStateAssignment_4() { return cEndCompositeStateAssignment_4; }
		
		//[CompositeState]
		public CrossReference getEndCompositeStateCompositeStateCrossReference_4_0() { return cEndCompositeStateCompositeStateCrossReference_4_0; }
		
		//ID
		public RuleCall getEndCompositeStateCompositeStateIDTerminalRuleCall_4_0_1() { return cEndCompositeStateCompositeStateIDTerminalRuleCall_4_0_1; }
	}
	public class ConcernLevelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.ConcernLevel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConcernLevelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cStateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStateStateParserRuleCall_2_0 = (RuleCall)cStateAssignment_2.eContents().get(0);
		private final Keyword cEnd_concernLevelKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEndConcernLevelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cEndConcernLevelConcernLevelCrossReference_4_0 = (CrossReference)cEndConcernLevelAssignment_4.eContents().get(0);
		private final RuleCall cEndConcernLevelConcernLevelIDTerminalRuleCall_4_0_1 = (RuleCall)cEndConcernLevelConcernLevelCrossReference_4_0.eContents().get(1);
		
		//ConcernLevel:
		//	"concernLevel" name=ID
		//	state+=State+
		//	"end_concernLevel" endConcernLevel=[ConcernLevel];
		@Override public ParserRule getRule() { return rule; }
		
		//"concernLevel" name=ID state+=State+ "end_concernLevel" endConcernLevel=[ConcernLevel]
		public Group getGroup() { return cGroup; }
		
		//"concernLevel"
		public Keyword getConcernLevelKeyword_0() { return cConcernLevelKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//state+=State+
		public Assignment getStateAssignment_2() { return cStateAssignment_2; }
		
		//State
		public RuleCall getStateStateParserRuleCall_2_0() { return cStateStateParserRuleCall_2_0; }
		
		//"end_concernLevel"
		public Keyword getEnd_concernLevelKeyword_3() { return cEnd_concernLevelKeyword_3; }
		
		//endConcernLevel=[ConcernLevel]
		public Assignment getEndConcernLevelAssignment_4() { return cEndConcernLevelAssignment_4; }
		
		//[ConcernLevel]
		public CrossReference getEndConcernLevelConcernLevelCrossReference_4_0() { return cEndConcernLevelConcernLevelCrossReference_4_0; }
		
		//ID
		public RuleCall getEndConcernLevelConcernLevelIDTerminalRuleCall_4_0_1() { return cEndConcernLevelConcernLevelIDTerminalRuleCall_4_0_1; }
	}
	public class SimpleConstraintStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.SimpleConstraintState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cTypeSimpleConstraintStateKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cNewVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNewVariableVariableParserRuleCall_2_0 = (RuleCall)cNewVariableAssignment_2.eContents().get(0);
		private final Assignment cConstraintAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConstraintConstraintParserRuleCall_3_0 = (RuleCall)cConstraintAssignment_3.eContents().get(0);
		
		//SimpleConstraintState:
		//	type="simpleConstraintState" name=ID
		//	newVariable+=Variable*
		//	constraint+=Constraint+;
		@Override public ParserRule getRule() { return rule; }
		
		//type="simpleConstraintState" name=ID newVariable+=Variable* constraint+=Constraint+
		public Group getGroup() { return cGroup; }
		
		//type="simpleConstraintState"
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//"simpleConstraintState"
		public Keyword getTypeSimpleConstraintStateKeyword_0_0() { return cTypeSimpleConstraintStateKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//newVariable+=Variable*
		public Assignment getNewVariableAssignment_2() { return cNewVariableAssignment_2; }
		
		//Variable
		public RuleCall getNewVariableVariableParserRuleCall_2_0() { return cNewVariableVariableParserRuleCall_2_0; }
		
		//constraint+=Constraint+
		public Assignment getConstraintAssignment_3() { return cConstraintAssignment_3; }
		
		//Constraint
		public RuleCall getConstraintConstraintParserRuleCall_3_0() { return cConstraintConstraintParserRuleCall_3_0; }
	}
	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.Constraint");
		private final RuleCall cLog_exprParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Constraint:
		//	Log_expr;
		@Override public ParserRule getRule() { return rule; }
		
		//Log_expr
		public RuleCall getLog_exprParserRuleCall() { return cLog_exprParserRuleCall; }
	}
	public class Log_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.Log_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOr_exprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLog_exprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorHyphenMinusGreaterThanSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorLessThanSignHyphenMinusGreaterThanSignKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorLessThanSignHyphenMinusKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOr_exprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		////| GlobalConstraint;
		//Log_expr Constraint:
		//	Or_expr ({Log_expr.left=current} operator=('->' | '<->' | '<-') right=Or_expr)*
		@Override public ParserRule getRule() { return rule; }
		
		//Or_expr ({Log_expr.left=current} operator=('->' | '<->' | '<-') right=Or_expr)*
		public Group getGroup() { return cGroup; }
		
		//Or_expr
		public RuleCall getOr_exprParserRuleCall_0() { return cOr_exprParserRuleCall_0; }
		
		//({Log_expr.left=current} operator=('->' | '<->' | '<-') right=Or_expr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Log_expr.left=current}
		public Action getLog_exprLeftAction_1_0() { return cLog_exprLeftAction_1_0; }
		
		//operator=('->' | '<->' | '<-')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('->' | '<->' | '<-')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'->'
		public Keyword getOperatorHyphenMinusGreaterThanSignKeyword_1_1_0_0() { return cOperatorHyphenMinusGreaterThanSignKeyword_1_1_0_0; }
		
		//'<->'
		public Keyword getOperatorLessThanSignHyphenMinusGreaterThanSignKeyword_1_1_0_1() { return cOperatorLessThanSignHyphenMinusGreaterThanSignKeyword_1_1_0_1; }
		
		//'<-'
		public Keyword getOperatorLessThanSignHyphenMinusKeyword_1_1_0_2() { return cOperatorLessThanSignHyphenMinusKeyword_1_1_0_2; }
		
		//right=Or_expr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Or_expr
		public RuleCall getRightOr_exprParserRuleCall_1_2_0() { return cRightOr_exprParserRuleCall_1_2_0; }
	}
	public class Or_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.Or_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAnd_exprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOr_exprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSolidusReverseSolidusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAnd_exprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or_expr Constraint:
		//	And_expr ({Or_expr.left=current} '/\\' right=And_expr)*
		@Override public ParserRule getRule() { return rule; }
		
		//And_expr ({Or_expr.left=current} '/\\' right=And_expr)*
		public Group getGroup() { return cGroup; }
		
		//And_expr
		public RuleCall getAnd_exprParserRuleCall_0() { return cAnd_exprParserRuleCall_0; }
		
		//({Or_expr.left=current} '/\\' right=And_expr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Or_expr.left=current}
		public Action getOr_exprLeftAction_1_0() { return cOr_exprLeftAction_1_0; }
		
		//'/\\'
		public Keyword getSolidusReverseSolidusKeyword_1_1() { return cSolidusReverseSolidusKeyword_1_1; }
		
		//right=And_expr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//And_expr
		public RuleCall getRightAnd_exprParserRuleCall_1_2_0() { return cRightAnd_exprParserRuleCall_1_2_0; }
	}
	public class And_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.And_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cCompare_exprParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cGlobalConstraintParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAnd_exprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cReverseSolidusSolidusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightCompare_exprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And_expr Constraint:
		//	(Compare_expr | GlobalConstraint) ({And_expr.left=current} '\\/' right=Compare_expr)*
		@Override public ParserRule getRule() { return rule; }
		
		//(Compare_expr | GlobalConstraint) ({And_expr.left=current} '\\/' right=Compare_expr)*
		public Group getGroup() { return cGroup; }
		
		//(Compare_expr | GlobalConstraint)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//Compare_expr
		public RuleCall getCompare_exprParserRuleCall_0_0() { return cCompare_exprParserRuleCall_0_0; }
		
		//GlobalConstraint
		public RuleCall getGlobalConstraintParserRuleCall_0_1() { return cGlobalConstraintParserRuleCall_0_1; }
		
		//({And_expr.left=current} '\\/' right=Compare_expr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{And_expr.left=current}
		public Action getAnd_exprLeftAction_1_0() { return cAnd_exprLeftAction_1_0; }
		
		//'\\/'
		public Keyword getReverseSolidusSolidusKeyword_1_1() { return cReverseSolidusSolidusKeyword_1_1; }
		
		//right=Compare_expr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Compare_expr
		public RuleCall getRightCompare_exprParserRuleCall_1_2_0() { return cRightCompare_exprParserRuleCall_1_2_0; }
	}
	public class Compare_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.Compare_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMath_exprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cCompare_exprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorGreaterThanSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorEqualsSignKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOperatorExclamationMarkEqualsSignKeyword_1_1_0_3 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(3);
		private final Keyword cOperatorGreaterThanSignKeyword_1_1_0_4 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(4);
		private final Keyword cOperatorLessThanSignKeyword_1_1_0_5 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(5);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMath_exprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		////Not_expr returns Constraint:
		////{Not_expr} '!' operand=Not_expr | Compare_expr;
		//Compare_expr Constraint:
		//	math_expr ({Compare_expr.left=current} operator=('>=' | '<=' | '=' | '!=' | '>' | '<') right=math_expr)*
		@Override public ParserRule getRule() { return rule; }
		
		//math_expr ({Compare_expr.left=current} operator=('>=' | '<=' | '=' | '!=' | '>' | '<') right=math_expr)*
		public Group getGroup() { return cGroup; }
		
		//math_expr
		public RuleCall getMath_exprParserRuleCall_0() { return cMath_exprParserRuleCall_0; }
		
		//({Compare_expr.left=current} operator=('>=' | '<=' | '=' | '!=' | '>' | '<') right=math_expr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Compare_expr.left=current}
		public Action getCompare_exprLeftAction_1_0() { return cCompare_exprLeftAction_1_0; }
		
		//operator=('>=' | '<=' | '=' | '!=' | '>' | '<')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('>=' | '<=' | '=' | '!=' | '>' | '<')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'>='
		public Keyword getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_0() { return cOperatorGreaterThanSignEqualsSignKeyword_1_1_0_0; }
		
		//'<='
		public Keyword getOperatorLessThanSignEqualsSignKeyword_1_1_0_1() { return cOperatorLessThanSignEqualsSignKeyword_1_1_0_1; }
		
		//'='
		public Keyword getOperatorEqualsSignKeyword_1_1_0_2() { return cOperatorEqualsSignKeyword_1_1_0_2; }
		
		//'!='
		public Keyword getOperatorExclamationMarkEqualsSignKeyword_1_1_0_3() { return cOperatorExclamationMarkEqualsSignKeyword_1_1_0_3; }
		
		//'>'
		public Keyword getOperatorGreaterThanSignKeyword_1_1_0_4() { return cOperatorGreaterThanSignKeyword_1_1_0_4; }
		
		//'<'
		public Keyword getOperatorLessThanSignKeyword_1_1_0_5() { return cOperatorLessThanSignKeyword_1_1_0_5; }
		
		//right=math_expr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//math_expr
		public RuleCall getRightMath_exprParserRuleCall_1_2_0() { return cRightMath_exprParserRuleCall_1_2_0; }
	}
	public class Math_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.math_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMath_exprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightTermParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//math_expr Constraint:
		//	term ({math_expr.left=current} ('+' | '*') right=term)*
		@Override public ParserRule getRule() { return rule; }
		
		//term ({math_expr.left=current} ('+' | '*') right=term)*
		public Group getGroup() { return cGroup; }
		
		//term
		public RuleCall getTermParserRuleCall_0() { return cTermParserRuleCall_0; }
		
		//({math_expr.left=current} ('+' | '*') right=term)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{math_expr.left=current}
		public Action getMath_exprLeftAction_1_0() { return cMath_exprLeftAction_1_0; }
		
		//('+' | '*')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_1_0() { return cPlusSignKeyword_1_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_1_1() { return cAsteriskKeyword_1_1_1; }
		
		//right=term
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//term
		public RuleCall getRightTermParserRuleCall_1_2_0() { return cRightTermParserRuleCall_1_2_0; }
	}
	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.term");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cConstraintParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNotAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cNotKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cConstraintAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cConstraintTermParserRuleCall_1_2_0 = (RuleCall)cConstraintAssignment_1_2.eContents().get(0);
		private final RuleCall cAtomicParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//term Constraint:
		//	'(' Constraint ')' | {Not} "not" Constraint=term | Atomic
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Constraint ')' | {Not} "not" Constraint=term | Atomic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Constraint ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Constraint
		public RuleCall getConstraintParserRuleCall_0_1() { return cConstraintParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//{Not} "not" Constraint=term
		public Group getGroup_1() { return cGroup_1; }
		
		//{Not}
		public Action getNotAction_1_0() { return cNotAction_1_0; }
		
		//"not"
		public Keyword getNotKeyword_1_1() { return cNotKeyword_1_1; }
		
		//Constraint=term
		public Assignment getConstraintAssignment_1_2() { return cConstraintAssignment_1_2; }
		
		//term
		public RuleCall getConstraintTermParserRuleCall_1_2_0() { return cConstraintTermParserRuleCall_1_2_0; }
		
		//Atomic
		public RuleCall getAtomicParserRuleCall_2() { return cAtomicParserRuleCall_2; }
	}
	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueConstantParserRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cVarAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueVariableNameParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cStringAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueStringsParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		////"(" Atomic( {term.left=current} ('+'|'*') right=Atomic)* ")";
		////'(' Constraint ')'| Constraint=term | Atomic;
		//Atomic Constraint:
		//	{Constant} value=Constant | {Var} value=VariableName | {string} value=strings
		@Override public ParserRule getRule() { return rule; }
		
		//{Constant} value=Constant | {Var} value=VariableName | {string} value=strings
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Constant} value=Constant
		public Group getGroup_0() { return cGroup_0; }
		
		//{Constant}
		public Action getConstantAction_0_0() { return cConstantAction_0_0; }
		
		//value=Constant
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//Constant
		public RuleCall getValueConstantParserRuleCall_0_1_0() { return cValueConstantParserRuleCall_0_1_0; }
		
		//{Var} value=VariableName
		public Group getGroup_1() { return cGroup_1; }
		
		//{Var}
		public Action getVarAction_1_0() { return cVarAction_1_0; }
		
		//value=VariableName
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//VariableName
		public RuleCall getValueVariableNameParserRuleCall_1_1_0() { return cValueVariableNameParserRuleCall_1_1_0; }
		
		//{string} value=strings
		public Group getGroup_2() { return cGroup_2; }
		
		//{string}
		public Action getStringAction_2_0() { return cStringAction_2_0; }
		
		//value=strings
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//strings
		public RuleCall getValueStringsParserRuleCall_2_1_0() { return cValueStringsParserRuleCall_2_1_0; }
	}
	public class VariableNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.VariableName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameVariableCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cNameVariableCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cInstanceAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInstanceIntValueParserRuleCall_1_1_0 = (RuleCall)cInstanceAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//VariableName:
		//	name=[Variable] ('[' instance=IntValue ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=[Variable] ('[' instance=IntValue ']')?
		public Group getGroup() { return cGroup; }
		
		//name=[Variable]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//[Variable]
		public CrossReference getNameVariableCrossReference_0_0() { return cNameVariableCrossReference_0_0; }
		
		//ID
		public RuleCall getNameVariableIDTerminalRuleCall_0_0_1() { return cNameVariableIDTerminalRuleCall_0_0_1; }
		
		//('[' instance=IntValue ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//instance=IntValue
		public Assignment getInstanceAssignment_1_1() { return cInstanceAssignment_1_1; }
		
		//IntValue
		public RuleCall getInstanceIntValueParserRuleCall_1_1_0() { return cInstanceIntValueParserRuleCall_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}
	public class GlobalConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.GlobalConstraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGroup_valuationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGroup_most_leastParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMax_MinParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//GlobalConstraint:
		//	group_valuation | group_most_least | Max_Min;
		@Override public ParserRule getRule() { return rule; }
		
		//group_valuation | group_most_least | Max_Min
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//group_valuation
		public RuleCall getGroup_valuationParserRuleCall_0() { return cGroup_valuationParserRuleCall_0; }
		
		//group_most_least
		public RuleCall getGroup_most_leastParserRuleCall_1() { return cGroup_most_leastParserRuleCall_1; }
		
		//Max_Min
		public RuleCall getMax_MinParserRuleCall_2() { return cMax_MinParserRuleCall_2; }
	}
	public class Group_most_leastElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.group_most_least");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cAt_leastKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cAt_mostKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cInstancesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInstancesIntValueParserRuleCall_1_0 = (RuleCall)cInstancesAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariablesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariablesVarEnumerationParserRuleCall_3_0 = (RuleCall)cVariablesAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAtomicAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAtomicAtomicParserRuleCall_6_0 = (RuleCall)cAtomicAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//group_most_least:
		//	("at_least(" | "at_most(") instances=IntValue "," variables=varEnumeration ']' "," atomic=Atomic ")";
		@Override public ParserRule getRule() { return rule; }
		
		//("at_least(" | "at_most(") instances=IntValue "," variables=varEnumeration ']' "," atomic=Atomic ")"
		public Group getGroup() { return cGroup; }
		
		//("at_least(" | "at_most(")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"at_least("
		public Keyword getAt_leastKeyword_0_0() { return cAt_leastKeyword_0_0; }
		
		//"at_most("
		public Keyword getAt_mostKeyword_0_1() { return cAt_mostKeyword_0_1; }
		
		//instances=IntValue
		public Assignment getInstancesAssignment_1() { return cInstancesAssignment_1; }
		
		//IntValue
		public RuleCall getInstancesIntValueParserRuleCall_1_0() { return cInstancesIntValueParserRuleCall_1_0; }
		
		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//variables=varEnumeration
		public Assignment getVariablesAssignment_3() { return cVariablesAssignment_3; }
		
		//varEnumeration
		public RuleCall getVariablesVarEnumerationParserRuleCall_3_0() { return cVariablesVarEnumerationParserRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
		
		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//atomic=Atomic
		public Assignment getAtomicAssignment_6() { return cAtomicAssignment_6; }
		
		//Atomic
		public RuleCall getAtomicAtomicParserRuleCall_6_0() { return cAtomicAtomicParserRuleCall_6_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class Group_valuationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.group_valuation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAll_equalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarVarEnumerationParserRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAtomicAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAtomicAtomicParserRuleCall_3_0 = (RuleCall)cAtomicAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//group_valuation:
		//	"all_equal(" var=varEnumeration "," atomic=Atomic ']' ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"all_equal(" var=varEnumeration "," atomic=Atomic ']' ")"
		public Group getGroup() { return cGroup; }
		
		//"all_equal("
		public Keyword getAll_equalKeyword_0() { return cAll_equalKeyword_0; }
		
		//var=varEnumeration
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }
		
		//varEnumeration
		public RuleCall getVarVarEnumerationParserRuleCall_1_0() { return cVarVarEnumerationParserRuleCall_1_0; }
		
		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//atomic=Atomic
		public Assignment getAtomicAssignment_3() { return cAtomicAssignment_3; }
		
		//Atomic
		public RuleCall getAtomicAtomicParserRuleCall_3_0() { return cAtomicAtomicParserRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class Max_MinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.Max_Min");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cMaximumKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cMinimumKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarVariableNameParserRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVarAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVarVarEnumerationParserRuleCall_3_0 = (RuleCall)cVarAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Max_Min:
		//	("maximum(" | "minimum(") var=VariableName "," var=varEnumeration ']' ")";
		@Override public ParserRule getRule() { return rule; }
		
		//("maximum(" | "minimum(") var=VariableName "," var=varEnumeration ']' ")"
		public Group getGroup() { return cGroup; }
		
		//("maximum(" | "minimum(")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"maximum("
		public Keyword getMaximumKeyword_0_0() { return cMaximumKeyword_0_0; }
		
		//"minimum("
		public Keyword getMinimumKeyword_0_1() { return cMinimumKeyword_0_1; }
		
		//var=VariableName
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }
		
		//VariableName
		public RuleCall getVarVariableNameParserRuleCall_1_0() { return cVarVariableNameParserRuleCall_1_0; }
		
		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//var=varEnumeration
		public Assignment getVarAssignment_3() { return cVarAssignment_3; }
		
		//varEnumeration
		public RuleCall getVarVarEnumerationParserRuleCall_3_0() { return cVarVarEnumerationParserRuleCall_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class VarEnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.varEnumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarNameVariableNameParserRuleCall_1_0 = (RuleCall)cVarNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVarNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVarNameVariableNameParserRuleCall_2_1_0 = (RuleCall)cVarNameAssignment_2_1.eContents().get(0);
		
		//varEnumeration:
		//	'[' varName=VariableName (',' varName=VariableName)+;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' varName=VariableName (',' varName=VariableName)+
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//varName=VariableName
		public Assignment getVarNameAssignment_1() { return cVarNameAssignment_1; }
		
		//VariableName
		public RuleCall getVarNameVariableNameParserRuleCall_1_0() { return cVarNameVariableNameParserRuleCall_1_0; }
		
		//(',' varName=VariableName)+
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//varName=VariableName
		public Assignment getVarNameAssignment_2_1() { return cVarNameAssignment_2_1; }
		
		//VariableName
		public RuleCall getVarNameVariableNameParserRuleCall_2_1_0() { return cVarNameVariableNameParserRuleCall_2_1_0; }
	}
	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ("." ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.IntValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cDigitZeroKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDigitOneKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//IntValue:
		//	INT | '0' | '1';
		@Override public ParserRule getRule() { return rule; }
		
		//INT | '0' | '1'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'0'
		public Keyword getDigitZeroKeyword_1() { return cDigitZeroKeyword_1; }
		
		//'1'
		public Keyword getDigitOneKeyword_2() { return cDigitOneKeyword_2; }
	}
	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.stateconstrainttransition.StateConstraintTransition.Constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Alternatives cAlternatives_2 = (Alternatives)cAlternatives.eContents().get(2);
		private final Keyword cDigitZeroKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cDigitOneKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		//Constant:
		//	INT | INT '.' INT | ('0' | '1');
		@Override public ParserRule getRule() { return rule; }
		
		//INT | INT '.' INT | ('0' | '1')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//INT '.' INT
		public Group getGroup_1() { return cGroup_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_2() { return cINTTerminalRuleCall_1_2; }
		
		//('0' | '1')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'0'
		public Keyword getDigitZeroKeyword_2_0() { return cDigitZeroKeyword_2_0; }
		
		//'1'
		public Keyword getDigitOneKeyword_2_1() { return cDigitOneKeyword_2_1; }
	}
	
	
	private final ModelElements pModel;
	private final VariableElements pVariable;
	private final VarTypeElements pVarType;
	private final MultipleElements pMultiple;
	private final DomainElements pDomain;
	private final FloatDomainElements pFloatDomain;
	private final IntDomainElements pIntDomain;
	private final EnumerationElements pEnumeration;
	private final IntEnumerationElements pIntEnumeration;
	private final StringEnumerationElements pStringEnumeration;
	private final MaxElements pMax;
	private final MinElements pMin;
	private final StringsElements pStrings;
	private final StateElements pState;
	private final TransitionElements pTransition;
	private final StartTransitionElements pStartTransition;
	private final EndTransitionElements pEndTransition;
	private final FullTransitionElements pFullTransition;
	private final EventElements pEvent;
	private final EventOccurenceElements pEventOccurence;
	private final StateOccurenceElements pStateOccurence;
	private final StateConstraintElements pStateConstraint;
	private final Or_stateElements pOr_state;
	private final And_stateElements pAnd_state;
	private final StateNameElements pStateName;
	private final CompositeStateElements pCompositeState;
	private final ConcernLevelElements pConcernLevel;
	private final SimpleConstraintStateElements pSimpleConstraintState;
	private final ConstraintElements pConstraint;
	private final Log_exprElements pLog_expr;
	private final Or_exprElements pOr_expr;
	private final And_exprElements pAnd_expr;
	private final Compare_exprElements pCompare_expr;
	private final Math_exprElements pMath_expr;
	private final TermElements pTerm;
	private final AtomicElements pAtomic;
	private final VariableNameElements pVariableName;
	private final GlobalConstraintElements pGlobalConstraint;
	private final Group_most_leastElements pGroup_most_least;
	private final Group_valuationElements pGroup_valuation;
	private final Max_MinElements pMax_Min;
	private final VarEnumerationElements pVarEnumeration;
	private final FQNElements pFQN;
	private final IntValueElements pIntValue;
	private final ConstantElements pConstant;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public StateConstraintTransitionGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pVariable = new VariableElements();
		this.pVarType = new VarTypeElements();
		this.pMultiple = new MultipleElements();
		this.pDomain = new DomainElements();
		this.pFloatDomain = new FloatDomainElements();
		this.pIntDomain = new IntDomainElements();
		this.pEnumeration = new EnumerationElements();
		this.pIntEnumeration = new IntEnumerationElements();
		this.pStringEnumeration = new StringEnumerationElements();
		this.pMax = new MaxElements();
		this.pMin = new MinElements();
		this.pStrings = new StringsElements();
		this.pState = new StateElements();
		this.pTransition = new TransitionElements();
		this.pStartTransition = new StartTransitionElements();
		this.pEndTransition = new EndTransitionElements();
		this.pFullTransition = new FullTransitionElements();
		this.pEvent = new EventElements();
		this.pEventOccurence = new EventOccurenceElements();
		this.pStateOccurence = new StateOccurenceElements();
		this.pStateConstraint = new StateConstraintElements();
		this.pOr_state = new Or_stateElements();
		this.pAnd_state = new And_stateElements();
		this.pStateName = new StateNameElements();
		this.pCompositeState = new CompositeStateElements();
		this.pConcernLevel = new ConcernLevelElements();
		this.pSimpleConstraintState = new SimpleConstraintStateElements();
		this.pConstraint = new ConstraintElements();
		this.pLog_expr = new Log_exprElements();
		this.pOr_expr = new Or_exprElements();
		this.pAnd_expr = new And_exprElements();
		this.pCompare_expr = new Compare_exprElements();
		this.pMath_expr = new Math_exprElements();
		this.pTerm = new TermElements();
		this.pAtomic = new AtomicElements();
		this.pVariableName = new VariableNameElements();
		this.pGlobalConstraint = new GlobalConstraintElements();
		this.pGroup_most_least = new Group_most_leastElements();
		this.pGroup_valuation = new Group_valuationElements();
		this.pMax_Min = new Max_MinElements();
		this.pVarEnumeration = new VarEnumerationElements();
		this.pFQN = new FQNElements();
		this.pIntValue = new IntValueElements();
		this.pConstant = new ConstantElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.stateconstrainttransition.StateConstraintTransition".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	"stateMachine" name=ID
	//	//Variables cretaed for this model, or retrieved from other models
	//	variable+=Variable+
	//	//the constraints generated from external models (they should be flexible)
	//	flexConstraints+=Constraint*
	//	//states/transitions that defined the dynamic behavior of the SPL
	//	state+=State+
	//	transition+=Transition+;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	/// *--------- Variable declaration ---------* / //The variable needs more tweeking 
	//Variable:
	//	varType=VarType context="Param"? inEnumeration="Enum"? name=ID isMultiInstanciated=multiple? domain=Domain?
	//	values+=Enumeration?;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//VarType:
	//	"String" | "Integer" | "Float" | "Boolean";
	public VarTypeElements getVarTypeAccess() {
		return pVarType;
	}
	
	public ParserRule getVarTypeRule() {
		return getVarTypeAccess().getRule();
	}
	
	//multiple:
	//	"[" minimum+=min "," maximum+=max "]";
	public MultipleElements getMultipleAccess() {
		return pMultiple;
	}
	
	public ParserRule getMultipleRule() {
		return getMultipleAccess().getRule();
	}
	
	//Domain:
	//	FloatDomain | IntDomain;
	public DomainElements getDomainAccess() {
		return pDomain;
	}
	
	public ParserRule getDomainRule() {
		return getDomainAccess().getRule();
	}
	
	//FloatDomain:
	//	"[" IntValue '.' IntValue ".." IntValue '.' IntValue "]";
	public FloatDomainElements getFloatDomainAccess() {
		return pFloatDomain;
	}
	
	public ParserRule getFloatDomainRule() {
		return getFloatDomainAccess().getRule();
	}
	
	//IntDomain:
	//	"[" IntValue ".." IntValue "]";
	public IntDomainElements getIntDomainAccess() {
		return pIntDomain;
	}
	
	public ParserRule getIntDomainRule() {
		return getIntDomainAccess().getRule();
	}
	
	//Enumeration:
	//	IntEnumeration | StringEnumeration;
	public EnumerationElements getEnumerationAccess() {
		return pEnumeration;
	}
	
	public ParserRule getEnumerationRule() {
		return getEnumerationAccess().getRule();
	}
	
	//IntEnumeration:
	//	'{' IntValue (',' IntValue)+ '}';
	public IntEnumerationElements getIntEnumerationAccess() {
		return pIntEnumeration;
	}
	
	public ParserRule getIntEnumerationRule() {
		return getIntEnumerationAccess().getRule();
	}
	
	//StringEnumeration:
	//	'{' strings (',' strings)+ '}';
	public StringEnumerationElements getStringEnumerationAccess() {
		return pStringEnumeration;
	}
	
	public ParserRule getStringEnumerationRule() {
		return getStringEnumerationAccess().getRule();
	}
	
	//max:
	//	IntValue;
	public MaxElements getMaxAccess() {
		return pMax;
	}
	
	public ParserRule getMaxRule() {
		return getMaxAccess().getRule();
	}
	
	//min:
	//	IntValue;
	public MinElements getMinAccess() {
		return pMin;
	}
	
	public ParserRule getMinRule() {
		return getMinAccess().getRule();
	}
	
	//strings:
	//	STRING;
	public StringsElements getStringsAccess() {
		return pStrings;
	}
	
	public ParserRule getStringsRule() {
		return getStringsAccess().getRule();
	}
	
	/// *--------- The Statemachine ---------* / State:
	//	SimpleConstraintState | CompositeState;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//Transition:
	//	StartTransition | EndTransition | FullTransition;
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//StartTransition:
	//	"Start" "transition" "to" targetState=[State|FQN];
	public StartTransitionElements getStartTransitionAccess() {
		return pStartTransition;
	}
	
	public ParserRule getStartTransitionRule() {
		return getStartTransitionAccess().getRule();
	}
	
	//EndTransition:
	//	"End" "transition" "from" sourceState=[State|FQN];
	public EndTransitionElements getEndTransitionAccess() {
		return pEndTransition;
	}
	
	public ParserRule getEndTransitionRule() {
		return getEndTransitionAccess().getRule();
	}
	
	//FullTransition:
	//	("When" state=[State|FQN])? "if" event=Event "transition" "from" sourceState=[State|FQN] "to" targetState=[State|FQN];
	public FullTransitionElements getFullTransitionAccess() {
		return pFullTransition;
	}
	
	public ParserRule getFullTransitionRule() {
		return getFullTransitionAccess().getRule();
	}
	
	//Event:
	//	{Event} evOcc=EventOccurence? operator=("\\/" | "/\\")? sttOcc=StateOccurence?;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//EventOccurence:
	//	eventExpression+=Constraint;
	public EventOccurenceElements getEventOccurenceAccess() {
		return pEventOccurence;
	}
	
	public ParserRule getEventOccurenceRule() {
		return getEventOccurenceAccess().getRule();
	}
	
	//StateOccurence:
	//	stateExpression+=StateConstraint;
	public StateOccurenceElements getStateOccurenceAccess() {
		return pStateOccurence;
	}
	
	public ParserRule getStateOccurenceRule() {
		return getStateOccurenceAccess().getRule();
	}
	
	//StateConstraint:
	//	Or_state;
	public StateConstraintElements getStateConstraintAccess() {
		return pStateConstraint;
	}
	
	public ParserRule getStateConstraintRule() {
		return getStateConstraintAccess().getRule();
	}
	
	//Or_state StateConstraint:
	//	And_state ({Or_state.left=current} '\\/' ripe=And_state)*
	public Or_stateElements getOr_stateAccess() {
		return pOr_state;
	}
	
	public ParserRule getOr_stateRule() {
		return getOr_stateAccess().getRule();
	}
	
	//And_state StateConstraint:
	//	StateName ({And_state.left=current} '/\\' ripe=StateName)*
	public And_stateElements getAnd_stateAccess() {
		return pAnd_state;
	}
	
	public ParserRule getAnd_stateRule() {
		return getAnd_stateAccess().getRule();
	}
	
	//StateName StateConstraint:
	//	{stateNameRef} value=[State|FQN] "=" "1"
	public StateNameElements getStateNameAccess() {
		return pStateName;
	}
	
	public ParserRule getStateNameRule() {
		return getStateNameAccess().getRule();
	}
	
	//CompositeState:
	//	type="compositeState" name=ID
	//	concernlevel+=ConcernLevel+
	//	"end_compositeState" endCompositeState=[CompositeState];
	public CompositeStateElements getCompositeStateAccess() {
		return pCompositeState;
	}
	
	public ParserRule getCompositeStateRule() {
		return getCompositeStateAccess().getRule();
	}
	
	//ConcernLevel:
	//	"concernLevel" name=ID
	//	state+=State+
	//	"end_concernLevel" endConcernLevel=[ConcernLevel];
	public ConcernLevelElements getConcernLevelAccess() {
		return pConcernLevel;
	}
	
	public ParserRule getConcernLevelRule() {
		return getConcernLevelAccess().getRule();
	}
	
	//SimpleConstraintState:
	//	type="simpleConstraintState" name=ID
	//	newVariable+=Variable*
	//	constraint+=Constraint+;
	public SimpleConstraintStateElements getSimpleConstraintStateAccess() {
		return pSimpleConstraintState;
	}
	
	public ParserRule getSimpleConstraintStateRule() {
		return getSimpleConstraintStateAccess().getRule();
	}
	
	//Constraint:
	//	Log_expr;
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}
	
	////| GlobalConstraint;
	//Log_expr Constraint:
	//	Or_expr ({Log_expr.left=current} operator=('->' | '<->' | '<-') right=Or_expr)*
	public Log_exprElements getLog_exprAccess() {
		return pLog_expr;
	}
	
	public ParserRule getLog_exprRule() {
		return getLog_exprAccess().getRule();
	}
	
	//Or_expr Constraint:
	//	And_expr ({Or_expr.left=current} '/\\' right=And_expr)*
	public Or_exprElements getOr_exprAccess() {
		return pOr_expr;
	}
	
	public ParserRule getOr_exprRule() {
		return getOr_exprAccess().getRule();
	}
	
	//And_expr Constraint:
	//	(Compare_expr | GlobalConstraint) ({And_expr.left=current} '\\/' right=Compare_expr)*
	public And_exprElements getAnd_exprAccess() {
		return pAnd_expr;
	}
	
	public ParserRule getAnd_exprRule() {
		return getAnd_exprAccess().getRule();
	}
	
	////Not_expr returns Constraint:
	////{Not_expr} '!' operand=Not_expr | Compare_expr;
	//Compare_expr Constraint:
	//	math_expr ({Compare_expr.left=current} operator=('>=' | '<=' | '=' | '!=' | '>' | '<') right=math_expr)*
	public Compare_exprElements getCompare_exprAccess() {
		return pCompare_expr;
	}
	
	public ParserRule getCompare_exprRule() {
		return getCompare_exprAccess().getRule();
	}
	
	//math_expr Constraint:
	//	term ({math_expr.left=current} ('+' | '*') right=term)*
	public Math_exprElements getMath_exprAccess() {
		return pMath_expr;
	}
	
	public ParserRule getMath_exprRule() {
		return getMath_exprAccess().getRule();
	}
	
	//term Constraint:
	//	'(' Constraint ')' | {Not} "not" Constraint=term | Atomic
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}
	
	////"(" Atomic( {term.left=current} ('+'|'*') right=Atomic)* ")";
	////'(' Constraint ')'| Constraint=term | Atomic;
	//Atomic Constraint:
	//	{Constant} value=Constant | {Var} value=VariableName | {string} value=strings
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}
	
	//VariableName:
	//	name=[Variable] ('[' instance=IntValue ']')?;
	public VariableNameElements getVariableNameAccess() {
		return pVariableName;
	}
	
	public ParserRule getVariableNameRule() {
		return getVariableNameAccess().getRule();
	}
	
	//GlobalConstraint:
	//	group_valuation | group_most_least | Max_Min;
	public GlobalConstraintElements getGlobalConstraintAccess() {
		return pGlobalConstraint;
	}
	
	public ParserRule getGlobalConstraintRule() {
		return getGlobalConstraintAccess().getRule();
	}
	
	//group_most_least:
	//	("at_least(" | "at_most(") instances=IntValue "," variables=varEnumeration ']' "," atomic=Atomic ")";
	public Group_most_leastElements getGroup_most_leastAccess() {
		return pGroup_most_least;
	}
	
	public ParserRule getGroup_most_leastRule() {
		return getGroup_most_leastAccess().getRule();
	}
	
	//group_valuation:
	//	"all_equal(" var=varEnumeration "," atomic=Atomic ']' ")";
	public Group_valuationElements getGroup_valuationAccess() {
		return pGroup_valuation;
	}
	
	public ParserRule getGroup_valuationRule() {
		return getGroup_valuationAccess().getRule();
	}
	
	//Max_Min:
	//	("maximum(" | "minimum(") var=VariableName "," var=varEnumeration ']' ")";
	public Max_MinElements getMax_MinAccess() {
		return pMax_Min;
	}
	
	public ParserRule getMax_MinRule() {
		return getMax_MinAccess().getRule();
	}
	
	//varEnumeration:
	//	'[' varName=VariableName (',' varName=VariableName)+;
	public VarEnumerationElements getVarEnumerationAccess() {
		return pVarEnumeration;
	}
	
	public ParserRule getVarEnumerationRule() {
		return getVarEnumerationAccess().getRule();
	}
	
	//FQN:
	//	ID ("." ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//IntValue:
	//	INT | '0' | '1';
	public IntValueElements getIntValueAccess() {
		return pIntValue;
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}
	
	//Constant:
	//	INT | INT '.' INT | ('0' | '1');
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
