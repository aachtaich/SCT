/*
 * generated by Xtext 2.10.0
 */
grammar InternalStateConstraintTransition;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.stateconstrainttransition.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.stateconstrainttransition.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.stateconstrainttransition.services.StateConstraintTransitionGrammarAccess;

}

@parser::members {

 	private StateConstraintTransitionGrammarAccess grammarAccess;

    public InternalStateConstraintTransitionParser(TokenStream input, StateConstraintTransitionGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected StateConstraintTransitionGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='stateMachine'
		{
			newLeafNode(otherlv_0, grammarAccess.getModelAccess().getStateMachineKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getVariableVariableParserRuleCall_2_0());
				}
				lv_variable_2_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"variable",
						lv_variable_2_0,
						"org.xtext.example.stateconstrainttransition.StateConstraintTransition.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getFlexConstraintsConstraintParserRuleCall_3_0());
				}
				lv_flexConstraints_3_0=ruleConstraint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"flexConstraints",
						lv_flexConstraints_3_0,
						"org.xtext.example.stateconstrainttransition.StateConstraintTransition.Constraint");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getStateStateParserRuleCall_4_0());
				}
				lv_state_4_0=ruleState
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"state",
						lv_state_4_0,
						"org.xtext.example.stateconstrainttransition.StateConstraintTransition.State");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getTransitionTransitionParserRuleCall_5_0());
				}
				lv_transition_5_0=ruleTransition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"transition",
						lv_transition_5_0,
						"org.xtext.example.stateconstrainttransition.StateConstraintTransition.Transition");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableAccess().getVarTypeVarTypeParserRuleCall_0_0());
				}
				lv_varType_0_0=ruleVarType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableRule());
					}
					set(
						$current,
						"varType",
						lv_varType_0_0,
						"org.xtext.example.stateconstrainttransition.StateConstraintTransition.VarType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_context_1_0='Param'
				{
					newLeafNode(lv_context_1_0, grammarAccess.getVariableAccess().getContextParamKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableRule());
					}
					setWithLastConsumed($current, "context", lv_context_1_0, "Param");
				}
			)
		)?
		(
			(
				lv_inEnumeration_2_0='Enum'
				{
					newLeafNode(lv_inEnumeration_2_0, grammarAccess.getVariableAccess().getInEnumerationEnumKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableRule());
					}
					setWithLastConsumed($current, "inEnumeration", lv_inEnumeration_2_0, "Enum");
				}
			)
		)?
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableAccess().getIsMultiInstanciatedMultipleParserRuleCall_4_0());
				}
				lv_isMultiInstanciated_4_0=rulemultiple
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableRule());
					}
					set(
						$current,
						"isMultiInstanciated",
						lv_isMultiInstanciated_4_0,
						"org.xtext.example.stateconstrainttransition.StateConstraintTransition.multiple");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableAccess().getDomainDomainParserRuleCall_5_0());
				}
				lv_domain_5_0=ruleDomain
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableRule());
					}
					set(
						$current,
						"domain",
						lv_domain_5_0,
						"org.xtext.example.stateconstrainttransition.StateConstraintTransition.Domain");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableAccess().getValuesEnumerationParserRuleCall_6_0());
				}
				lv_values_6_0=ruleEnumeration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableRule());
					}
					add(
						$current,
						"values",
						lv_values_6_0,
						"org.xtext.example.stateconstrainttransition.StateConstraintTransition.Enumeration");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleVarType
entryRuleVarType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getVarTypeRule()); }
	iv_ruleVarType=ruleVarType
	{ $current=$iv_ruleVarType.current.getText(); }
	EOF;

// Rule VarType
ruleVarType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='String'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVarTypeAccess().getStringKeyword_0());
		}
		    |
		kw='Integer'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVarTypeAccess().getIntegerKeyword_1());
		}
		    |
		kw='Float'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVarTypeAccess().getFloatKeyword_2());
		}
		    |
		kw='Boolean'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getVarTypeAccess().getBooleanKeyword_3());
		}
	)
;

// Entry rule entryRulemultiple
entryRulemultiple returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultipleRule()); }
	iv_rulemultiple=rulemultiple
	{ $current=$iv_rulemultiple.current; }
	EOF;

// Rule multiple
rulemultiple returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getMultipleAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMultipleAccess().getMinimumMinParserRuleCall_1_0());
				}
				lv_minimum_1_0=rulemin
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMultipleRule());
					}
					add(
						$current,
						"minimum",
						lv_minimum_1_0,
						"org.xtext.example.stateconstrainttransition.StateConstraintTransition.min");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getMultipleAccess().getCommaKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMultipleAccess().getMaximumMaxParserRuleCall_3_0());
				}
				lv_maximum_3_0=rulemax
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMultipleRule());
					}
					add(
						$current,
						"maximum",
						lv_maximum_3_0,
						"org.xtext.example.stateconstrainttransition.StateConstraintTransition.max");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getMultipleAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleDomain
entryRuleDomain returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDomainRule()); }
	iv_ruleDomain=ruleDomain
	{ $current=$iv_ruleDomain.current.getText(); }
	EOF;

// Rule Domain
ruleDomain returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDomainAccess().getFloatDomainParserRuleCall_0());
		}
		this_FloatDomain_0=ruleFloatDomain
		{
			$current.merge(this_FloatDomain_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDomainAccess().getIntDomainParserRuleCall_1());
		}
		this_IntDomain_1=ruleIntDomain
		{
			$current.merge(this_IntDomain_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFloatDomain
entryRuleFloatDomain returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFloatDomainRule()); }
	iv_ruleFloatDomain=ruleFloatDomain
	{ $current=$iv_ruleFloatDomain.current.getText(); }
	EOF;

// Rule FloatDomain
ruleFloatDomain returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='['
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFloatDomainAccess().getLeftSquareBracketKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getFloatDomainAccess().getIntValueParserRuleCall_1());
		}
		this_IntValue_1=ruleIntValue
		{
			$current.merge(this_IntValue_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFloatDomainAccess().getFullStopKeyword_2());
		}
		{
			newCompositeNode(grammarAccess.getFloatDomainAccess().getIntValueParserRuleCall_3());
		}
		this_IntValue_3=ruleIntValue
		{
			$current.merge(this_IntValue_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='..'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFloatDomainAccess().getFullStopFullStopKeyword_4());
		}
		{
			newCompositeNode(grammarAccess.getFloatDomainAccess().getIntValueParserRuleCall_5());
		}
		this_IntValue_5=ruleIntValue
		{
			$current.merge(this_IntValue_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFloatDomainAccess().getFullStopKeyword_6());
		}
		{
			newCompositeNode(grammarAccess.getFloatDomainAccess().getIntValueParserRuleCall_7());
		}
		this_IntValue_7=ruleIntValue
		{
			$current.merge(this_IntValue_7);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=']'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFloatDomainAccess().getRightSquareBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleIntDomain
entryRuleIntDomain returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIntDomainRule()); }
	iv_ruleIntDomain=ruleIntDomain
	{ $current=$iv_ruleIntDomain.current.getText(); }
	EOF;

// Rule IntDomain
ruleIntDomain returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='['
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIntDomainAccess().getLeftSquareBracketKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getIntDomainAccess().getIntValueParserRuleCall_1());
		}
		this_IntValue_1=ruleIntValue
		{
			$current.merge(this_IntValue_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='..'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIntDomainAccess().getFullStopFullStopKeyword_2());
		}
		{
			newCompositeNode(grammarAccess.getIntDomainAccess().getIntValueParserRuleCall_3());
		}
		this_IntValue_3=ruleIntValue
		{
			$current.merge(this_IntValue_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=']'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIntDomainAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleEnumeration
entryRuleEnumeration returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEnumerationRule()); }
	iv_ruleEnumeration=ruleEnumeration
	{ $current=$iv_ruleEnumeration.current.getText(); }
	EOF;

// Rule Enumeration
ruleEnumeration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEnumerationAccess().getIntEnumerationParserRuleCall_0());
		}
		this_IntEnumeration_0=ruleIntEnumeration
		{
			$current.merge(this_IntEnumeration_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEnumerationAccess().getStringEnumerationParserRuleCall_1());
		}
		this_StringEnumeration_1=ruleStringEnumeration
		{
			$current.merge(this_StringEnumeration_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIntEnumeration
entryRuleIntEnumeration returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIntEnumerationRule()); }
	iv_ruleIntEnumeration=ruleIntEnumeration
	{ $current=$iv_ruleIntEnumeration.current.getText(); }
	EOF;

// Rule IntEnumeration
ruleIntEnumeration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIntEnumerationAccess().getLeftCurlyBracketKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getIntEnumerationAccess().getIntValueParserRuleCall_1());
		}
		this_IntValue_1=ruleIntValue
		{
			$current.merge(this_IntValue_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIntEnumerationAccess().getCommaKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getIntEnumerationAccess().getIntValueParserRuleCall_2_1());
			}
			this_IntValue_3=ruleIntValue
			{
				$current.merge(this_IntValue_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)+
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIntEnumerationAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleStringEnumeration
entryRuleStringEnumeration returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStringEnumerationRule()); }
	iv_ruleStringEnumeration=ruleStringEnumeration
	{ $current=$iv_ruleStringEnumeration.current.getText(); }
	EOF;

// Rule StringEnumeration
ruleStringEnumeration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStringEnumerationAccess().getLeftCurlyBracketKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getStringEnumerationAccess().getStringsParserRuleCall_1());
		}
		this_strings_1=rulestrings
		{
			$current.merge(this_strings_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getStringEnumerationAccess().getCommaKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getStringEnumerationAccess().getStringsParserRuleCall_2_1());
			}
			this_strings_3=rulestrings
			{
				$current.merge(this_strings_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)+
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStringEnumerationAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRulemax
entryRulemax returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMaxRule()); }
	iv_rulemax=rulemax
	{ $current=$iv_rulemax.current.getText(); }
	EOF;

// Rule max
rulemax returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getMaxAccess().getIntValueParserRuleCall());
	}
	this_IntValue_0=ruleIntValue
	{
		$current.merge(this_IntValue_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRulemin
entryRulemin returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMinRule()); }
	iv_rulemin=rulemin
	{ $current=$iv_rulemin.current.getText(); }
	EOF;

// Rule min
rulemin returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getMinAccess().getIntValueParserRuleCall());
	}
	this_IntValue_0=ruleIntValue
	{
		$current.merge(this_IntValue_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRulestrings
entryRulestrings returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStringsRule()); }
	iv_rulestrings=rulestrings
	{ $current=$iv_rulestrings.current.getText(); }
	EOF;

// Rule strings
rulestrings returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_STRING_0=RULE_STRING
	{
		$current.merge(this_STRING_0);
	}
	{
		newLeafNode(this_STRING_0, grammarAccess.getStringsAccess().getSTRINGTerminalRuleCall());
	}
;

// Entry rule entryRuleState
entryRuleState returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStateRule()); }
	iv_ruleState=ruleState
	{ $current=$iv_ruleState.current; }
	EOF;

// Rule State
ruleState returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStateAccess().getSimpleConstraintStateParserRuleCall_0());
		}
		this_SimpleConstraintState_0=ruleSimpleConstraintState
		{
			$current = $this_SimpleConstraintState_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStateAccess().getCompositeStateParserRuleCall_1());
		}
		this_CompositeState_1=ruleCompositeState
		{
			$current = $this_CompositeState_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTransition
entryRuleTransition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTransitionRule()); }
	iv_ruleTransition=ruleTransition
	{ $current=$iv_ruleTransition.current; }
	EOF;

// Rule Transition
ruleTransition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTransitionAccess().getStartTransitionParserRuleCall_0());
		}
		this_StartTransition_0=ruleStartTransition
		{
			$current = $this_StartTransition_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTransitionAccess().getEndTransitionParserRuleCall_1());
		}
		this_EndTransition_1=ruleEndTransition
		{
			$current = $this_EndTransition_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTransitionAccess().getFullTransitionParserRuleCall_2());
		}
		this_FullTransition_2=ruleFullTransition
		{
			$current = $this_FullTransition_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleStartTransition
entryRuleStartTransition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStartTransitionRule()); }
	iv_ruleStartTransition=ruleStartTransition
	{ $current=$iv_ruleStartTransition.current; }
	EOF;

// Rule StartTransition
ruleStartTransition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Start'
		{
			newLeafNode(otherlv_0, grammarAccess.getStartTransitionAccess().getStartKeyword_0());
		}
		otherlv_1='transition'
		{
			newLeafNode(otherlv_1, grammarAccess.getStartTransitionAccess().getTransitionKeyword_1());
		}
		otherlv_2='to'
		{
			newLeafNode(otherlv_2, grammarAccess.getStartTransitionAccess().getToKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStartTransitionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getStartTransitionAccess().getTargetStateStateCrossReference_3_0());
				}
				ruleFQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEndTransition
entryRuleEndTransition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEndTransitionRule()); }
	iv_ruleEndTransition=ruleEndTransition
	{ $current=$iv_ruleEndTransition.current; }
	EOF;

// Rule EndTransition
ruleEndTransition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='End'
		{
			newLeafNode(otherlv_0, grammarAccess.getEndTransitionAccess().getEndKeyword_0());
		}
		otherlv_1='transition'
		{
			newLeafNode(otherlv_1, grammarAccess.getEndTransitionAccess().getTransitionKeyword_1());
		}
		otherlv_2='from'
		{
			newLeafNode(otherlv_2, grammarAccess.getEndTransitionAccess().getFromKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEndTransitionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getEndTransitionAccess().getSourceStateStateCrossReference_3_0());
				}
				ruleFQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFullTransition
entryRuleFullTransition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFullTransitionRule()); }
	iv_ruleFullTransition=ruleFullTransition
	{ $current=$iv_ruleFullTransition.current; }
	EOF;

// Rule FullTransition
ruleFullTransition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='When'
			{
				newLeafNode(otherlv_0, grammarAccess.getFullTransitionAccess().getWhenKeyword_0_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFullTransitionRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getFullTransitionAccess().getStateStateCrossReference_0_1_0());
					}
					ruleFQN
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_2='if'
		{
			newLeafNode(otherlv_2, grammarAccess.getFullTransitionAccess().getIfKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFullTransitionAccess().getEventEventParserRuleCall_2_0());
				}
				lv_event_3_0=ruleEvent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFullTransitionRule());
					}
					set(
						$current,
						"event",
						lv_event_3_0,
						"org.xtext.example.stateconstrainttransition.StateConstraintTransition.Event");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='transition'
		{
			newLeafNode(otherlv_4, grammarAccess.getFullTransitionAccess().getTransitionKeyword_3());
		}
		otherlv_5='from'
		{
			newLeafNode(otherlv_5, grammarAccess.getFullTransitionAccess().getFromKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFullTransitionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getFullTransitionAccess().getSourceStateStateCrossReference_5_0());
				}
				ruleFQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='to'
		{
			newLeafNode(otherlv_7, grammarAccess.getFullTransitionAccess().getToKeyword_6());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFullTransitionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getFullTransitionAccess().getTargetStateStateCrossReference_7_0());
				}
				ruleFQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEvent
entryRuleEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEventRule()); }
	iv_ruleEvent=ruleEvent
	{ $current=$iv_ruleEvent.current; }
	EOF;

// Rule Event
ruleEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEventAccess().getEventAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEventAccess().getEvOccEventOccurenceParserRuleCall_1_0());
				}
				lv_evOcc_1_0=ruleEventOccurence
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEventRule());
					}
					set(
						$current,
						"evOcc",
						lv_evOcc_1_0,
						"org.xtext.example.stateconstrainttransition.StateConstraintTransition.EventOccurence");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				(
					lv_operator_2_1='\\/'
					{
						newLeafNode(lv_operator_2_1, grammarAccess.getEventAccess().getOperatorReverseSolidusSolidusKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEventRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_2_1, null);
					}
					    |
					lv_operator_2_2='/\\'
					{
						newLeafNode(lv_operator_2_2, grammarAccess.getEventAccess().getOperatorSolidusReverseSolidusKeyword_2_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getEventRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_2_2, null);
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getEventAccess().getSttOccStateOccurenceParserRuleCall_3_0());
				}
				lv_sttOcc_3_0=ruleStateOccurence
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEventRule());
					}
					set(
						$current,
						"sttOcc",
						lv_sttOcc_3_0,
						"org.xtext.example.stateconstrainttransition.StateConstraintTransition.StateOccurence");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleEventOccurence
entryRuleEventOccurence returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEventOccurenceRule()); }
	iv_ruleEventOccurence=ruleEventOccurence
	{ $current=$iv_ruleEventOccurence.current; }
	EOF;

// Rule EventOccurence
ruleEventOccurence returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getEventOccurenceAccess().getEventExpressionConstraintParserRuleCall_0());
			}
			lv_eventExpression_0_0=ruleConstraint
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getEventOccurenceRule());
				}
				add(
					$current,
					"eventExpression",
					lv_eventExpression_0_0,
					"org.xtext.example.stateconstrainttransition.StateConstraintTransition.Constraint");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleStateOccurence
entryRuleStateOccurence returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStateOccurenceRule()); }
	iv_ruleStateOccurence=ruleStateOccurence
	{ $current=$iv_ruleStateOccurence.current; }
	EOF;

// Rule StateOccurence
ruleStateOccurence returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getStateOccurenceAccess().getStateExpressionStateConstraintParserRuleCall_0());
			}
			lv_stateExpression_0_0=ruleStateConstraint
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getStateOccurenceRule());
				}
				add(
					$current,
					"stateExpression",
					lv_stateExpression_0_0,
					"org.xtext.example.stateconstrainttransition.StateConstraintTransition.StateConstraint");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleStateConstraint
entryRuleStateConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStateConstraintRule()); }
	iv_ruleStateConstraint=ruleStateConstraint
	{ $current=$iv_ruleStateConstraint.current; }
	EOF;

// Rule StateConstraint
ruleStateConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getStateConstraintAccess().getOr_stateParserRuleCall());
	}
	this_Or_state_0=ruleOr_state
	{
		$current = $this_Or_state_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleOr_state
entryRuleOr_state returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOr_stateRule()); }
	iv_ruleOr_state=ruleOr_state
	{ $current=$iv_ruleOr_state.current; }
	EOF;

// Rule Or_state
ruleOr_state returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOr_stateAccess().getAnd_stateParserRuleCall_0());
		}
		this_And_state_0=ruleAnd_state
		{
			$current = $this_And_state_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getOr_stateAccess().getOr_stateLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='\\/'
			{
				newLeafNode(otherlv_2, grammarAccess.getOr_stateAccess().getReverseSolidusSolidusKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOr_stateAccess().getRipeAnd_stateParserRuleCall_1_2_0());
					}
					lv_ripe_3_0=ruleAnd_state
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOr_stateRule());
						}
						set(
							$current,
							"ripe",
							lv_ripe_3_0,
							"org.xtext.example.stateconstrainttransition.StateConstraintTransition.And_state");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAnd_state
entryRuleAnd_state returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnd_stateRule()); }
	iv_ruleAnd_state=ruleAnd_state
	{ $current=$iv_ruleAnd_state.current; }
	EOF;

// Rule And_state
ruleAnd_state returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAnd_stateAccess().getStateNameParserRuleCall_0());
		}
		this_StateName_0=ruleStateName
		{
			$current = $this_StateName_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAnd_stateAccess().getAnd_stateLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='/\\'
			{
				newLeafNode(otherlv_2, grammarAccess.getAnd_stateAccess().getSolidusReverseSolidusKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAnd_stateAccess().getRipeStateNameParserRuleCall_1_2_0());
					}
					lv_ripe_3_0=ruleStateName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAnd_stateRule());
						}
						set(
							$current,
							"ripe",
							lv_ripe_3_0,
							"org.xtext.example.stateconstrainttransition.StateConstraintTransition.StateName");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleStateName
entryRuleStateName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStateNameRule()); }
	iv_ruleStateName=ruleStateName
	{ $current=$iv_ruleStateName.current; }
	EOF;

// Rule StateName
ruleStateName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStateNameAccess().getStateNameRefAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStateNameRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getStateNameAccess().getValueStateCrossReference_1_0());
				}
				ruleFQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getStateNameAccess().getEqualsSignKeyword_2());
		}
		otherlv_3='1'
		{
			newLeafNode(otherlv_3, grammarAccess.getStateNameAccess().getDigitOneKeyword_3());
		}
	)
;

// Entry rule entryRuleCompositeState
entryRuleCompositeState returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompositeStateRule()); }
	iv_ruleCompositeState=ruleCompositeState
	{ $current=$iv_ruleCompositeState.current; }
	EOF;

// Rule CompositeState
ruleCompositeState returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_type_0_0='compositeState'
				{
					newLeafNode(lv_type_0_0, grammarAccess.getCompositeStateAccess().getTypeCompositeStateKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCompositeStateRule());
					}
					setWithLastConsumed($current, "type", lv_type_0_0, "compositeState");
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getCompositeStateAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCompositeStateRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCompositeStateAccess().getConcernlevelConcernLevelParserRuleCall_2_0());
				}
				lv_concernlevel_2_0=ruleConcernLevel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCompositeStateRule());
					}
					add(
						$current,
						"concernlevel",
						lv_concernlevel_2_0,
						"org.xtext.example.stateconstrainttransition.StateConstraintTransition.ConcernLevel");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3='end_compositeState'
		{
			newLeafNode(otherlv_3, grammarAccess.getCompositeStateAccess().getEnd_compositeStateKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCompositeStateRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getCompositeStateAccess().getEndCompositeStateCompositeStateCrossReference_4_0());
				}
			)
		)
	)
;

// Entry rule entryRuleConcernLevel
entryRuleConcernLevel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConcernLevelRule()); }
	iv_ruleConcernLevel=ruleConcernLevel
	{ $current=$iv_ruleConcernLevel.current; }
	EOF;

// Rule ConcernLevel
ruleConcernLevel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='concernLevel'
		{
			newLeafNode(otherlv_0, grammarAccess.getConcernLevelAccess().getConcernLevelKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getConcernLevelAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConcernLevelRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConcernLevelAccess().getStateStateParserRuleCall_2_0());
				}
				lv_state_2_0=ruleState
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConcernLevelRule());
					}
					add(
						$current,
						"state",
						lv_state_2_0,
						"org.xtext.example.stateconstrainttransition.StateConstraintTransition.State");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3='end_concernLevel'
		{
			newLeafNode(otherlv_3, grammarAccess.getConcernLevelAccess().getEnd_concernLevelKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConcernLevelRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getConcernLevelAccess().getEndConcernLevelConcernLevelCrossReference_4_0());
				}
			)
		)
	)
;

// Entry rule entryRuleSimpleConstraintState
entryRuleSimpleConstraintState returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleConstraintStateRule()); }
	iv_ruleSimpleConstraintState=ruleSimpleConstraintState
	{ $current=$iv_ruleSimpleConstraintState.current; }
	EOF;

// Rule SimpleConstraintState
ruleSimpleConstraintState returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_type_0_0='simpleConstraintState'
				{
					newLeafNode(lv_type_0_0, grammarAccess.getSimpleConstraintStateAccess().getTypeSimpleConstraintStateKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSimpleConstraintStateRule());
					}
					setWithLastConsumed($current, "type", lv_type_0_0, "simpleConstraintState");
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSimpleConstraintStateAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSimpleConstraintStateRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleConstraintStateAccess().getNewVariableVariableParserRuleCall_2_0());
				}
				lv_newVariable_2_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleConstraintStateRule());
					}
					add(
						$current,
						"newVariable",
						lv_newVariable_2_0,
						"org.xtext.example.stateconstrainttransition.StateConstraintTransition.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleConstraintStateAccess().getConstraintConstraintParserRuleCall_3_0());
				}
				lv_constraint_3_0=ruleConstraint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleConstraintStateRule());
					}
					add(
						$current,
						"constraint",
						lv_constraint_3_0,
						"org.xtext.example.stateconstrainttransition.StateConstraintTransition.Constraint");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleConstraint
entryRuleConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstraintRule()); }
	iv_ruleConstraint=ruleConstraint
	{ $current=$iv_ruleConstraint.current; }
	EOF;

// Rule Constraint
ruleConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getConstraintAccess().getLog_exprParserRuleCall());
	}
	this_Log_expr_0=ruleLog_expr
	{
		$current = $this_Log_expr_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleLog_expr
entryRuleLog_expr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLog_exprRule()); }
	iv_ruleLog_expr=ruleLog_expr
	{ $current=$iv_ruleLog_expr.current; }
	EOF;

// Rule Log_expr
ruleLog_expr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLog_exprAccess().getOr_exprParserRuleCall_0());
		}
		this_Or_expr_0=ruleOr_expr
		{
			$current = $this_Or_expr_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getLog_exprAccess().getLog_exprLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_operator_2_1='->'
						{
							newLeafNode(lv_operator_2_1, grammarAccess.getLog_exprAccess().getOperatorHyphenMinusGreaterThanSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getLog_exprRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_1, null);
						}
						    |
						lv_operator_2_2='<->'
						{
							newLeafNode(lv_operator_2_2, grammarAccess.getLog_exprAccess().getOperatorLessThanSignHyphenMinusGreaterThanSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getLog_exprRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_2, null);
						}
						    |
						lv_operator_2_3='<-'
						{
							newLeafNode(lv_operator_2_3, grammarAccess.getLog_exprAccess().getOperatorLessThanSignHyphenMinusKeyword_1_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getLog_exprRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_3, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLog_exprAccess().getRightOr_exprParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleOr_expr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLog_exprRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.stateconstrainttransition.StateConstraintTransition.Or_expr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOr_expr
entryRuleOr_expr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOr_exprRule()); }
	iv_ruleOr_expr=ruleOr_expr
	{ $current=$iv_ruleOr_expr.current; }
	EOF;

// Rule Or_expr
ruleOr_expr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOr_exprAccess().getAnd_exprParserRuleCall_0());
		}
		this_And_expr_0=ruleAnd_expr
		{
			$current = $this_And_expr_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getOr_exprAccess().getOr_exprLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='/\\'
			{
				newLeafNode(otherlv_2, grammarAccess.getOr_exprAccess().getSolidusReverseSolidusKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOr_exprAccess().getRightAnd_exprParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAnd_expr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOr_exprRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.stateconstrainttransition.StateConstraintTransition.And_expr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAnd_expr
entryRuleAnd_expr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnd_exprRule()); }
	iv_ruleAnd_expr=ruleAnd_expr
	{ $current=$iv_ruleAnd_expr.current; }
	EOF;

// Rule And_expr
ruleAnd_expr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getAnd_exprAccess().getCompare_exprParserRuleCall_0_0());
			}
			this_Compare_expr_0=ruleCompare_expr
			{
				$current = $this_Compare_expr_0.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getAnd_exprAccess().getGlobalConstraintParserRuleCall_0_1());
			}
			this_GlobalConstraint_1=ruleGlobalConstraint
			{
				$current = $this_GlobalConstraint_1.current;
				afterParserOrEnumRuleCall();
			}
		)
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAnd_exprAccess().getAnd_exprLeftAction_1_0(),
						$current);
				}
			)
			otherlv_3='\\/'
			{
				newLeafNode(otherlv_3, grammarAccess.getAnd_exprAccess().getReverseSolidusSolidusKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAnd_exprAccess().getRightCompare_exprParserRuleCall_1_2_0());
					}
					lv_right_4_0=ruleCompare_expr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAnd_exprRule());
						}
						set(
							$current,
							"right",
							lv_right_4_0,
							"org.xtext.example.stateconstrainttransition.StateConstraintTransition.Compare_expr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleCompare_expr
entryRuleCompare_expr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompare_exprRule()); }
	iv_ruleCompare_expr=ruleCompare_expr
	{ $current=$iv_ruleCompare_expr.current; }
	EOF;

// Rule Compare_expr
ruleCompare_expr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCompare_exprAccess().getMath_exprParserRuleCall_0());
		}
		this_math_expr_0=rulemath_expr
		{
			$current = $this_math_expr_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getCompare_exprAccess().getCompare_exprLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_operator_2_1='>='
						{
							newLeafNode(lv_operator_2_1, grammarAccess.getCompare_exprAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCompare_exprRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_1, null);
						}
						    |
						lv_operator_2_2='<='
						{
							newLeafNode(lv_operator_2_2, grammarAccess.getCompare_exprAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCompare_exprRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_2, null);
						}
						    |
						lv_operator_2_3='='
						{
							newLeafNode(lv_operator_2_3, grammarAccess.getCompare_exprAccess().getOperatorEqualsSignKeyword_1_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCompare_exprRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_3, null);
						}
						    |
						lv_operator_2_4='!='
						{
							newLeafNode(lv_operator_2_4, grammarAccess.getCompare_exprAccess().getOperatorExclamationMarkEqualsSignKeyword_1_1_0_3());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCompare_exprRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_4, null);
						}
						    |
						lv_operator_2_5='>'
						{
							newLeafNode(lv_operator_2_5, grammarAccess.getCompare_exprAccess().getOperatorGreaterThanSignKeyword_1_1_0_4());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCompare_exprRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_5, null);
						}
						    |
						lv_operator_2_6='<'
						{
							newLeafNode(lv_operator_2_6, grammarAccess.getCompare_exprAccess().getOperatorLessThanSignKeyword_1_1_0_5());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCompare_exprRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_6, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCompare_exprAccess().getRightMath_exprParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulemath_expr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCompare_exprRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.stateconstrainttransition.StateConstraintTransition.math_expr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulemath_expr
entryRulemath_expr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMath_exprRule()); }
	iv_rulemath_expr=rulemath_expr
	{ $current=$iv_rulemath_expr.current; }
	EOF;

// Rule math_expr
rulemath_expr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMath_exprAccess().getTermParserRuleCall_0());
		}
		this_term_0=ruleterm
		{
			$current = $this_term_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMath_exprAccess().getMath_exprLeftAction_1_0(),
						$current);
				}
			)
			(
				otherlv_2='+'
				{
					newLeafNode(otherlv_2, grammarAccess.getMath_exprAccess().getPlusSignKeyword_1_1_0());
				}
				    |
				otherlv_3='*'
				{
					newLeafNode(otherlv_3, grammarAccess.getMath_exprAccess().getAsteriskKeyword_1_1_1());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMath_exprAccess().getRightTermParserRuleCall_1_2_0());
					}
					lv_right_4_0=ruleterm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMath_exprRule());
						}
						set(
							$current,
							"right",
							lv_right_4_0,
							"org.xtext.example.stateconstrainttransition.StateConstraintTransition.term");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleterm
entryRuleterm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	iv_ruleterm=ruleterm
	{ $current=$iv_ruleterm.current; }
	EOF;

// Rule term
ruleterm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getTermAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getTermAccess().getConstraintParserRuleCall_0_1());
			}
			this_Constraint_1=ruleConstraint
			{
				$current = $this_Constraint_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getTermAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getTermAccess().getNotAction_1_0(),
						$current);
				}
			)
			otherlv_4='not'
			{
				newLeafNode(otherlv_4, grammarAccess.getTermAccess().getNotKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTermAccess().getConstraintTermParserRuleCall_1_2_0());
					}
					lv_Constraint_5_0=ruleterm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTermRule());
						}
						set(
							$current,
							"Constraint",
							lv_Constraint_5_0,
							"org.xtext.example.stateconstrainttransition.StateConstraintTransition.term");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getTermAccess().getAtomicParserRuleCall_2());
		}
		this_Atomic_6=ruleAtomic
		{
			$current = $this_Atomic_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAtomic
entryRuleAtomic returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicRule()); }
	iv_ruleAtomic=ruleAtomic
	{ $current=$iv_ruleAtomic.current; }
	EOF;

// Rule Atomic
ruleAtomic returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicAccess().getConstantAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAtomicAccess().getValueConstantParserRuleCall_0_1_0());
					}
					lv_value_1_0=ruleConstant
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAtomicRule());
						}
						set(
							$current,
							"value",
							lv_value_1_0,
							"org.xtext.example.stateconstrainttransition.StateConstraintTransition.Constant");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicAccess().getVarAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAtomicAccess().getValueVariableNameParserRuleCall_1_1_0());
					}
					lv_value_3_0=ruleVariableName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAtomicRule());
						}
						set(
							$current,
							"value",
							lv_value_3_0,
							"org.xtext.example.stateconstrainttransition.StateConstraintTransition.VariableName");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicAccess().getStringAction_2_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAtomicAccess().getValueStringsParserRuleCall_2_1_0());
					}
					lv_value_5_0=rulestrings
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAtomicRule());
						}
						set(
							$current,
							"value",
							lv_value_5_0,
							"org.xtext.example.stateconstrainttransition.StateConstraintTransition.strings");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleVariableName
entryRuleVariableName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableNameRule()); }
	iv_ruleVariableName=ruleVariableName
	{ $current=$iv_ruleVariableName.current; }
	EOF;

// Rule VariableName
ruleVariableName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableNameRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getVariableNameAccess().getNameVariableCrossReference_0_0());
				}
			)
		)
		(
			otherlv_1='['
			{
				newLeafNode(otherlv_1, grammarAccess.getVariableNameAccess().getLeftSquareBracketKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVariableNameAccess().getInstanceIntValueParserRuleCall_1_1_0());
					}
					lv_instance_2_0=ruleIntValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariableNameRule());
						}
						set(
							$current,
							"instance",
							lv_instance_2_0,
							"org.xtext.example.stateconstrainttransition.StateConstraintTransition.IntValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=']'
			{
				newLeafNode(otherlv_3, grammarAccess.getVariableNameAccess().getRightSquareBracketKeyword_1_2());
			}
		)?
	)
;

// Entry rule entryRuleGlobalConstraint
entryRuleGlobalConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGlobalConstraintRule()); }
	iv_ruleGlobalConstraint=ruleGlobalConstraint
	{ $current=$iv_ruleGlobalConstraint.current; }
	EOF;

// Rule GlobalConstraint
ruleGlobalConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getGlobalConstraintAccess().getGroup_valuationParserRuleCall_0());
		}
		this_group_valuation_0=rulegroup_valuation
		{
			$current = $this_group_valuation_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGlobalConstraintAccess().getGroup_most_leastParserRuleCall_1());
		}
		this_group_most_least_1=rulegroup_most_least
		{
			$current = $this_group_most_least_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGlobalConstraintAccess().getMax_MinParserRuleCall_2());
		}
		this_Max_Min_2=ruleMax_Min
		{
			$current = $this_Max_Min_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulegroup_most_least
entryRulegroup_most_least returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGroup_most_leastRule()); }
	iv_rulegroup_most_least=rulegroup_most_least
	{ $current=$iv_rulegroup_most_least.current; }
	EOF;

// Rule group_most_least
rulegroup_most_least returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='at_least('
			{
				newLeafNode(otherlv_0, grammarAccess.getGroup_most_leastAccess().getAt_leastKeyword_0_0());
			}
			    |
			otherlv_1='at_most('
			{
				newLeafNode(otherlv_1, grammarAccess.getGroup_most_leastAccess().getAt_mostKeyword_0_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getGroup_most_leastAccess().getInstancesIntValueParserRuleCall_1_0());
				}
				lv_instances_2_0=ruleIntValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGroup_most_leastRule());
					}
					set(
						$current,
						"instances",
						lv_instances_2_0,
						"org.xtext.example.stateconstrainttransition.StateConstraintTransition.IntValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getGroup_most_leastAccess().getCommaKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGroup_most_leastAccess().getVariablesVarEnumerationParserRuleCall_3_0());
				}
				lv_variables_4_0=rulevarEnumeration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGroup_most_leastRule());
					}
					set(
						$current,
						"variables",
						lv_variables_4_0,
						"org.xtext.example.stateconstrainttransition.StateConstraintTransition.varEnumeration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=']'
		{
			newLeafNode(otherlv_5, grammarAccess.getGroup_most_leastAccess().getRightSquareBracketKeyword_4());
		}
		otherlv_6=','
		{
			newLeafNode(otherlv_6, grammarAccess.getGroup_most_leastAccess().getCommaKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGroup_most_leastAccess().getAtomicAtomicParserRuleCall_6_0());
				}
				lv_atomic_7_0=ruleAtomic
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGroup_most_leastRule());
					}
					set(
						$current,
						"atomic",
						lv_atomic_7_0,
						"org.xtext.example.stateconstrainttransition.StateConstraintTransition.Atomic");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8=')'
		{
			newLeafNode(otherlv_8, grammarAccess.getGroup_most_leastAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRulegroup_valuation
entryRulegroup_valuation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGroup_valuationRule()); }
	iv_rulegroup_valuation=rulegroup_valuation
	{ $current=$iv_rulegroup_valuation.current; }
	EOF;

// Rule group_valuation
rulegroup_valuation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='all_equal('
		{
			newLeafNode(otherlv_0, grammarAccess.getGroup_valuationAccess().getAll_equalKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGroup_valuationAccess().getVarVarEnumerationParserRuleCall_1_0());
				}
				lv_var_1_0=rulevarEnumeration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGroup_valuationRule());
					}
					set(
						$current,
						"var",
						lv_var_1_0,
						"org.xtext.example.stateconstrainttransition.StateConstraintTransition.varEnumeration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getGroup_valuationAccess().getCommaKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGroup_valuationAccess().getAtomicAtomicParserRuleCall_3_0());
				}
				lv_atomic_3_0=ruleAtomic
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGroup_valuationRule());
					}
					set(
						$current,
						"atomic",
						lv_atomic_3_0,
						"org.xtext.example.stateconstrainttransition.StateConstraintTransition.Atomic");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getGroup_valuationAccess().getRightSquareBracketKeyword_4());
		}
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getGroup_valuationAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleMax_Min
entryRuleMax_Min returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMax_MinRule()); }
	iv_ruleMax_Min=ruleMax_Min
	{ $current=$iv_ruleMax_Min.current; }
	EOF;

// Rule Max_Min
ruleMax_Min returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='maximum('
			{
				newLeafNode(otherlv_0, grammarAccess.getMax_MinAccess().getMaximumKeyword_0_0());
			}
			    |
			otherlv_1='minimum('
			{
				newLeafNode(otherlv_1, grammarAccess.getMax_MinAccess().getMinimumKeyword_0_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMax_MinAccess().getVarVariableNameParserRuleCall_1_0());
				}
				lv_var_2_0=ruleVariableName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMax_MinRule());
					}
					set(
						$current,
						"var",
						lv_var_2_0,
						"org.xtext.example.stateconstrainttransition.StateConstraintTransition.VariableName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getMax_MinAccess().getCommaKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMax_MinAccess().getVarVarEnumerationParserRuleCall_3_0());
				}
				lv_var_4_0=rulevarEnumeration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMax_MinRule());
					}
					set(
						$current,
						"var",
						lv_var_4_0,
						"org.xtext.example.stateconstrainttransition.StateConstraintTransition.varEnumeration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=']'
		{
			newLeafNode(otherlv_5, grammarAccess.getMax_MinAccess().getRightSquareBracketKeyword_4());
		}
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getMax_MinAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRulevarEnumeration
entryRulevarEnumeration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarEnumerationRule()); }
	iv_rulevarEnumeration=rulevarEnumeration
	{ $current=$iv_rulevarEnumeration.current; }
	EOF;

// Rule varEnumeration
rulevarEnumeration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getVarEnumerationAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVarEnumerationAccess().getVarNameVariableNameParserRuleCall_1_0());
				}
				lv_varName_1_0=ruleVariableName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarEnumerationRule());
					}
					set(
						$current,
						"varName",
						lv_varName_1_0,
						"org.xtext.example.stateconstrainttransition.StateConstraintTransition.VariableName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getVarEnumerationAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVarEnumerationAccess().getVarNameVariableNameParserRuleCall_2_1_0());
					}
					lv_varName_3_0=ruleVariableName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVarEnumerationRule());
						}
						set(
							$current,
							"varName",
							lv_varName_3_0,
							"org.xtext.example.stateconstrainttransition.StateConstraintTransition.VariableName");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
	)
;

// Entry rule entryRuleFQN
entryRuleFQN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFQNRule()); }
	iv_ruleFQN=ruleFQN
	{ $current=$iv_ruleFQN.current.getText(); }
	EOF;

// Rule FQN
ruleFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getFQNAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFQNAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleIntValue
entryRuleIntValue returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIntValueRule()); }
	iv_ruleIntValue=ruleIntValue
	{ $current=$iv_ruleIntValue.current.getText(); }
	EOF;

// Rule IntValue
ruleIntValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getIntValueAccess().getINTTerminalRuleCall_0());
		}
		    |
		kw='0'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIntValueAccess().getDigitZeroKeyword_1());
		}
		    |
		kw='1'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIntValueAccess().getDigitOneKeyword_2());
		}
	)
;

// Entry rule entryRuleConstant
entryRuleConstant returns [String current=null]:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	iv_ruleConstant=ruleConstant
	{ $current=$iv_ruleConstant.current.getText(); }
	EOF;

// Rule Constant
ruleConstant returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getConstantAccess().getINTTerminalRuleCall_0());
		}
		    |
		(
			this_INT_1=RULE_INT
			{
				$current.merge(this_INT_1);
			}
			{
				newLeafNode(this_INT_1, grammarAccess.getConstantAccess().getINTTerminalRuleCall_1_0());
			}
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getConstantAccess().getFullStopKeyword_1_1());
			}
			this_INT_3=RULE_INT
			{
				$current.merge(this_INT_3);
			}
			{
				newLeafNode(this_INT_3, grammarAccess.getConstantAccess().getINTTerminalRuleCall_1_2());
			}
		)
		    |
		(
			kw='0'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getConstantAccess().getDigitZeroKeyword_2_0());
			}
			    |
			kw='1'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getConstantAccess().getDigitOneKeyword_2_1());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
